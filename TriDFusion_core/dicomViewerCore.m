function dicomViewerCore() 
%function dicomViewerCore() 
%DICOM Viewer 2D & 3D Core.
%See TriDFuison.doc (or pdf) for more information about options.
%
%Author: Daniel Lafontaine, lafontad@mskcc.org
%
%Last specifications modified:
%
% Copyright 2020, Daniel Lafontaine, on behalf of the TriDFusion development team.
% 
% This file is part of The Triple Dimention Fusion (TriDFusion).
% 
% TriDFusion development has been led by:  Daniel Lafontaine
% 
% TriDFusion is distributed under the terms of the Lesser GNU Public License. 
% 
%     This version of TriDFusion is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
% TriDFusion is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
% without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with TriDFusion.  If not, see <http://www.gnu.org/licenses/>.

    im  = dicomBuffer('get');
    imf = fusionBuffer('get');

    atMetaData = dicomMetaData('get');     

%            if isempty(fusionBuffer('get')) 
    if isFusion('get') == false
        imf = im;
    end            

    if size(im, 3) == 1
        set(uiOneWindowPtr('get'), 'Visible', 'off');
    else
        set(uiCorWindowPtr('get'), 'Visible', 'off');
        set(uiSagWindowPtr('get'), 'Visible', 'off');
        set(uiTraWindowPtr('get'), 'Visible', 'off');
    end

    if initWindowLevel('get') == true
       initWindowLevel('set', false);
        if strcmpi(atMetaData{1}.Modality, 'ct')
            [lMax, lMin] = computeWindowLevel(2000, 0);
        elseif strcmpi(atMetaData{1}.Modality, 'pt')
            lMin = min(im, [], 'all');
            lMax = max(im, [], 'all');                    
        else
            lMin = min(im, [], 'all');
            lMax = max(im, [], 'all');
        end

        windowLevel('set', 'min', lMin); 
        windowLevel('set', 'max', lMax);

%         setWindowMinMax(lMax, lMin);
        getInitWindowMinMax('set', lMax, lMin);

        sliderWindowLevelValue('set', 'min', 0.5);
        sliderWindowLevelValue('set', 'max', 0.5);               

    else
        lMin = windowLevel('get', 'min');   
        lMax = windowLevel('get', 'max');                
    end

    tInput = inputTemplate('get');        

    dOffset = get(uiSeriesPtr('get'), 'Value');
    if dOffset > numel(tInput)
        return;
    end          

    if isfield(atMetaData{1}, 'PatientName')
        sPatientName = atMetaData{1}.PatientName; 
        sPatientName = strrep(sPatientName,'^',' ');
        sPatientName = strtrim(sPatientName);
    else
        sPatientName = '';     
    end               

    if isfield(atMetaData{1}, 'PatientID')
        sPatientID = atMetaData{1}.PatientID;
        sPatientID = strtrim(sPatientID);
     else    
        sPatientID = '';
    end

    if isfield(atMetaData{1}, 'PatientName')
        sSeriesDescription = atMetaData{1}.SeriesDescription;
        sSeriesDescription = strrep(sSeriesDescription,'_',' ');
        sSeriesDescription = strrep(sSeriesDescription,'^',' ');
        sSeriesDescription = strtrim(sSeriesDescription);
    else
        sSeriesDescription = '';
    end

    if isfield(atMetaData{1}, 'SeriesDate')
            sSeriesDate = [atMetaData{1}.SeriesDate atMetaData{1}.SeriesTime];
            if contains(sSeriesDate,'.') 
                sSeriesDate = extractBefore(sSeriesDate,'.');
            end
            sSeriesDate = datetime(sSeriesDate, 'InputFormat', 'yyyyMMddHHmmss'); 
    else
        sSeriesDate = '';
    end            

    uiFusionSliderWindow = uiFusionSliderWindowPtr('get');
    if isempty(uiFusionSliderWindow) 

        uiFusionSliderWindow = ...
            uicontrol(fiMainWindowPtr('get'), ...
                      'Style'   , 'Slider', ...
                      'Value'   , sliderFusionWindowLevelValue('get', 'max'), ...
                      'Enable'  , 'on', ...
                      'CallBack', @sliderFusionWindowCallback ...
                      ); 
        uiFusionSliderWindowPtr('set', uiFusionSliderWindow);                  
        
        set(uiFusionSliderWindow, ...
            'BackgroundColor', backgroundColor('get') ...
            );

        addlistener(uiFusionSliderWindow, 'Value', 'PreSet',@sliderFusionWindowCallback);     

        set(uiFusionSliderWindow, 'Visible', 'off');                
    end

    uiFusionSliderLevel = uiFusionSliderLevelPtr('get');
    if isempty(uiFusionSliderLevel) 

        uiFusionSliderLevel = ...
            uicontrol(fiMainWindowPtr('get'), ...
                      'Style'   , 'Slider', ...
                      'Value'   , sliderFusionWindowLevelValue('get', 'min'), ...
                      'Enable'  , 'on', ...
                      'CallBack', @sliderFusionLevelCallback ...
                      );   
        uiFusionSliderLevelPtr('set', uiFusionSliderLevel);
        
        set(uiFusionSliderLevel, ...
            'BackgroundColor', backgroundColor('get') ...
            );

        addlistener(uiFusionSliderLevel, 'Value', 'PreSet',@sliderFusionLevelCallback);     

        set(uiFusionSliderLevel, 'Visible', 'off');                

    end

    uiAlphaSlider = uiAlphaSliderPtr('get');
    if isempty(uiAlphaSlider) 

        uiAlphaSlider = ...
            uicontrol(fiMainWindowPtr('get'), ...
                      'Style'   , 'Slider', ...
                      'Value'   , sliderAlphaValue('get'), ...
                      'Enable'  , 'on', ...
                      'CallBack', @sliderAlphaCallback ...
                      );    
        uiAlphaSliderPtr('set', uiAlphaSlider);                  
        
        set(uiAlphaSlider, ...
            'BackgroundColor', backgroundColor('get') ...
            );

        addlistener(uiAlphaSlider,'Value','PreSet',@sliderAlphaCallback);                        

        set(uiAlphaSlider, 'Visible', 'off');                
    end

    uiSliderWindow = uiSliderWindowPtr('get');
    if isempty(uiSliderWindow)
        uiSliderWindow = ...
            uicontrol(fiMainWindowPtr('get'), ...
                      'Style'   , 'Slider', ...
                      'Value'   , sliderWindowLevelValue('get', 'max'), ...
                      'Enable'  , 'on', ...
                      'CallBack', @sliderWindowCallback ...
                      );       
        uiSliderWindowPtr('set', uiSliderWindow);        
        
        set(uiSliderWindow, ...
            'BackgroundColor', backgroundColor('get') ...
            );

        addlistener(uiSliderWindow, 'Value', 'PreSet', @sliderWindowCallback);     

        set(uiSliderWindow, 'Visible', 'off');
    end

    uiSliderLevel = uiSliderLevelPtr('get');
    if isempty(uiSliderLevel)
        uiSliderLevel = ...
            uicontrol(fiMainWindowPtr('get'), ...
                      'Style'   , 'Slider', ...
                      'Value'   , sliderWindowLevelValue('get', 'min'), ...
                      'Enable'  , 'on', ...
                      'CallBack', @sliderLevelCallback ...
                      );  
        uiSliderLevelPtr('set', uiSliderLevel);        
        
        set(uiSliderLevel, ...
            'BackgroundColor', backgroundColor('get') ...
            );

        addlistener(uiSliderLevel,'Value','PreSet',@sliderLevelCallback); 

        set(uiSliderLevel, 'Visible', 'off');                
    end

    if isFusion('get') == true

        uiAlphaSlider = uiAlphaSliderPtr('get');
        if ~isempty(uiAlphaSlider) 

            aAxePosition = uiAlphaSlider.Parent.Position;                                                                 
            if size(dicomBuffer('get'), 3) == 1
                set(uiAlphaSlider, ...
                    'Position', [10 ...
                                 35 ...
                                 aAxePosition(3)-20 ...
                                 15 ...
                                 ] ...
                    );
            else
                set(uiAlphaSlider, ...
                    'Position', [aAxePosition(3)/2+10 ...
                                 addOnWidth('get')+50 ...
                                 aAxePosition(3)/2-20 ...
                                 15 ...
                                 ] ...
                    );
            end
        end

        ptrFusionColorbar = uiFusionColorbarPtr('get');
        if ~isempty(ptrFusionColorbar)   
            aAxePosition = ptrFusionColorbar.Parent.Position;
            if size(dicomBuffer('get'), 3) == 1
                set(ptrFusionColorbar, ...
                    'Position', [aAxePosition(3)-49 ...
                                 27 ...
                                 40 ...
                                 ((aAxePosition(4))/2)-41-20 ...
                                 ] ...
                    );
            else
                set(ptrFusionColorbar, ...
                    'Position', [aAxePosition(3)-49 ...
                                 29 ...
                                 40 ...
                                 ((aAxePosition(4))/2)-35-20 ...
                                 ] ...
                    );
            end                   
        end

        uiFusionSliderWindow = uiFusionSliderWindowPtr('get');
        if ~isempty(uiFusionSliderWindow) 
            aAxePosition = uiFusionSliderWindow.Parent.Position;                                                                 
            if size(dicomBuffer('get'), 3) == 1
                set(uiFusionSliderWindow, ...
                    'Position', [aAxePosition(3)-50 ...
                                 55 ...
                                 12 ...
                                 (aAxePosition(4)/2)-75-20 ...
                                 ] ...
                    );
            else
                set(uiFusionSliderWindow, ...
                    'Position', [aAxePosition(3)-50 ...
                                 70 ...
                                 12 ...
                                 (aAxePosition(4)/2)-75-20 ...
                                 ] ...
                    );
            end   
        end

        uiFusionSliderLevel = uiFusionSliderLevelPtr('get');
        if ~isempty(uiFusionSliderLevel) 
            aAxePosition = uiFusionSliderLevel.Parent.Position;                                                                 
            if size(dicomBuffer('get'), 3) == 1
                set(uiFusionSliderLevel, ...
                    'Position', [aAxePosition(3)-21 ...
                                 55 ...
                                 12 ...
                                 (aAxePosition(4)/2)-75-20 ...
                                 ] ...
                    );
            else
                set(uiFusionSliderLevel, ...
                    'Position', [aAxePosition(3)-21 ...
                                 70 ...
                                 12 ...
                                 (aAxePosition(4)/2)-75-20 ...
                                 ] ...
                    );
            end
        end

        uiSliderWindow = uiSliderWindowPtr('get');
        if ~isempty(uiSliderWindow)
            aAxePosition = uiSliderWindow.Parent.Position;                                                                
            if size(dicomBuffer('get'), 3) == 1
                set(uiSliderWindow, ...
                    'Position', [aAxePosition(3)-50 ...
                                 (aAxePosition(4)/2)-15 ...
                                 12 ...
                                 (aAxePosition(4)/2)-30-20 ...
                                 ] ...
                    );                    
            else
                set(uiSliderWindow, ...
                    'Position', [aAxePosition(3)-50 ...
                                 aAxePosition(4)/2 ...
                                 12 ...
                                 (aAxePosition(4)/2)-45-20 ...
                                 ] ...
                    );                   
            end                     
        end

        uiSliderLevel = uiSliderLevelPtr('get');
        if ~isempty(uiSliderLevel)
            aAxePosition = uiSliderLevel.Parent.Position;                                                                
            if size(dicomBuffer('get'), 3) == 1
                set(uiSliderLevel, ...
                    'Position', [aAxePosition(3)-21 ...
                                 (aAxePosition(4)/2)-15 ...
                                 12 ...
                                 (aAxePosition(4)/2)-30-20 ...
                                 ] ...
                    );
            else
                set(uiSliderLevel, ...
                    'Position', [aAxePosition(3)-21 ...
                                 aAxePosition(4)/2 ...
                                 12 ...
                                 (aAxePosition(4)/2)-45-20 ...
                                 ] ...
                    );
            end     
        end

    else
        uiSliderWindow = uiSliderWindowPtr('get');
        if ~isempty(uiSliderWindow)
            aAxePosition = uiSliderWindow.Parent.Position;                                                                
            if size(dicomBuffer('get'), 3) == 1
                set(uiSliderWindow, ...
                    'Position', [aAxePosition(3)-50 ...
                                 35 ...
                                 12 ...
                                 aAxePosition(4)-80-20 ...
                                 ] ...
                    );                    
            else
                set(uiSliderWindow, ...
                    'Position', [aAxePosition(3)-50 ...
                                 50 ...
                                 12 ...
                                 aAxePosition(4)-95-20 ...
                                 ] ...
                    );                   
            end     
        end

        uiSliderLevel = uiSliderLevelPtr('get');
        if ~isempty(uiSliderLevel)
            aAxePosition = uiSliderLevel.Parent.Position;                                                                
            if size(dicomBuffer('get'), 3) == 1
                set(uiSliderLevel, ...
                    'Position', [aAxePosition(3)-21 ...
                                 35 ...
                                 12 ...
                                 aAxePosition(4)-80-20 ...
                                 ] ...
                    );
            else
                set(uiSliderLevel, ...
                    'Position', [aAxePosition(3)-21 ...
                                 50 ...
                                 12 ...
                                 aAxePosition(4)-95-20 ...
                                 ] ...
                    );
            end     
        end

    end

    bInitSegPanel = false;
    if  viewSegPanel('get')
        bInitSegPanel = true;
        viewSegPanel('set', false);
        objSegPanel = viewSegPanelMenuObject('get');
        if ~isempty(objSegPanel)
            objSegPanel.Checked = 'off';
        end
    end

    bInitKernelPanel = false;
    if  viewKernelPanel('get')
        bInitKernelPanel = true;
        viewKernelPanel('set', false);
        objKernelPanel = viewKernelPanelMenuObject('get');
        if ~isempty(objKernelPanel)
            objKernelPanel.Checked = 'off';
        end
    end

    if size(im, 3) == 1

        set(btn3DPtr('get')        , 'Enable', 'off');                        
        set(btnIsoSurfacePtr('get'), 'Enable', 'off');                        
        set(btnMIPPtr('get')       , 'Enable', 'off'); 

        im = im(:,:);
        imf = imf(:,:);

        axesText('set', 'axe', '');

        cla(axefPtr('get'),'reset');
        cla(axePtr('get'),'reset');

        set(axefPtr('get'),  ...
            'Units'       , 'normalized', ...
            'Position'    , [0 0 1 1]   , ...
            'Visible'     , 'off'       , ...
            'Ydir'        , 'reverse'   , ...
            'XLim'        , [0 inf]     , ...
            'YLim'        , [0 inf]     , ...
            'CLim'        , [lMin lMax] ...
            );
        
        set(axePtr('get') , ...
            'Units'   , 'normalized', ...
            'Position', [0 0 1 1]   , ...
            'Visible' , 'off'       , ...
            'Ydir'    ,'reverse'    , ...
            'XLim'    , [0 inf]     , ...
            'YLim'    , [0 inf]     , ...
            'CLim'    , [lMin lMax] ...
            );

        if aspectRatio('get') == true

            x = computeAspectRatio('x', atMetaData);
            y = computeAspectRatio('y', atMetaData);

            daspect(axefPtr('get'), [x y 1]);               
            daspect(axePtr('get') , [x y 1]);               
        end

        if is3DEngine('get') == true
            if gaussFilter('get') == true
               imAxeF = surface(imgaussfilt(imf)   , ...
                                'linestyle', 'none', ...
                                'Parent'   , axefPtr('get') ...
                                ); 
                            
               imAxe  = surface(imgaussfilt(im)    , ...
                                'linestyle', 'none', ...
                                'Parent'   , axePtr('get') ...
                                );                    
            else    
               imAxeF = surface(imf, ...
                               'linestyle', 'none', ...
                               'Parent'   , axefPtr('get') ...
                               ); 
                           
               imAxe  = surface(im , ...
                               'linestyle', 'none', ...
                               'Parent'   , axePtr('get') ...
                               ); 
            end                

            if isShading('get')
                shading(axefPtr('get'), 'interp');
                shading(axePtr('get') , 'interp');
           else
                shading(axefPtr('get'), 'flat');
                shading(axePtr('get') , 'flat');
            end

        else
             if gaussFilter('get') == true
               imAxeF = imagesc(imgaussfilt(imf, 1), ...
                                'Parent', axefPtr('get') ...
                                );
                            
               imAxe  = imagesc(imgaussfilt(im , 1), ...
                                'Parent', axePtr('get') ...
                                );
            else
                imAxeF = imagesc(imf, ...
                                 'Parent', axefPtr('get') ...
                                 );
                             
                imAxe  = imagesc(im , ...
                                'Parent', axePtr('get') ...
                                );
            end

        end

        imAxePtr ('set', imAxe );
        imAxeFPtr('set', imAxeF);

        linkaxes([axePtr('get') axefPtr('get')],'xy');                                
        set(axePtr('get') , 'Visible', 'off');
        set(axefPtr('get'), 'Visible', 'off'); 

        if isFusion('get') == false
            set(imAxeF, 'Visible', 'off');                                       
        end


%               set(axe, 'CLim', [aCLim(1) aCLim(2)]);

 %       getColorMap('init');

        colormap(axefPtr('get')   , ...
                 getColorMap('one', ...
                 fusionColorMapOffset('get')) ...
                 );

        ptrFusionColorbar = ...
            colorbar(axefPtr('get') , ...
                     'AxisLocation' , 'in', ...
                     'Tag'          , 'Fusion Colorbar', ...
                     'EdgeColor'    , overlayColor('get'), ...
                     'Units'        , 'pixels', ...
                     'Box'          , 'off', ...
                     'Location'     , 'east', ...
                     'ButtonDownFcn', @colorbarCallback ...
                     );  
                                 
        uiFusionColorbarPtr('set', ptrFusionColorbar);
        aAxePosition = ptrFusionColorbar.Parent.Position;                
        set(ptrFusionColorbar, ...
            'Position', [aAxePosition(3)-49 ...
                         27 ...
                         40 ...
                         ((aAxePosition(4))/2)-41-20 ...
                         ] ...
           );

        if isFusion('get') == true
            set(ptrFusionColorbar, 'Visible', 'on');
        else   
            set(ptrFusionColorbar, 'Visible', 'off');
        end 

        colormap(axePtr('get'), ...
                 getColorMap('one', colorMapOffset('get')) ...
                );
            
        ptrColorbar = ...
            colorbar(axePtr('get')  , ...
                    'AxisLocation' , 'in', ...
                    'Tag'          , 'Colorbar', ...
                    'EdgeColor'    , overlayColor('get'), ...
                    'Units'        , 'pixels', ...
                    'Box'          , 'off', ...
                    'Location'     , 'east', ...
                    'ButtonDownFcn', @colorbarCallback ...
                    );                           
        uiColorbarPtr('set', ptrColorbar);

        aAxePosition = ptrColorbar.Parent.Position;
        if isFusion('get') == true
            set(ptrColorbar, ...
                'Position', [aAxePosition(3)-49 ...
                             (aAxePosition(4)/2)-9 ...
                             40 ...
                             (aAxePosition(4)/2)+5-20 ...
                             ] ...
                );
        else
            set(ptrColorbar, ...
                'Position', [aAxePosition(3)-49 ...
                             7 ...
                             40 ...
                             aAxePosition(4)-11-20 ...
                             ] ...
                );
        end

        tQuant = quantificationTemplate('get');

        sAxeText = sprintf('\n\n\n\n\n\n%s\n%s\n%s\n%s\nMin: %s\nMax: %s\nTotal: %s', ...
            sPatientName, ...
            sPatientID,  ...
            sSeriesDescription, ...                
            sSeriesDate, ...
            num2str(tQuant.tCount.dMin), ...
            num2str(tQuant.tCount.dMax), ...                          
            num2str(tQuant.tCount.dSum));

        uiOneWindow = uiOneWindowPtr('get');
        axAxeText = ...
            axes(uiOneWindow, ...
                 'Units'    , 'pixels', ...
                 'position' , [5 ...
                               (uiOneWindow.Position(4)-getTopWindowSize('ysize')) ...
                               100 ...
                               200 ...
                               ], ...
                 'visible'  , 'off' ...
                 );                 

        tAxeText = ...
            text(axAxeText, ...
                 0, ...
                 0, ...
                 sAxeText, ...
                 'Color' , overlayColor('get') ...
                 );  
                    
        if overlayActivate('get') == false
            set(tAxeText, 'Visible', 'off');
        end
        axesText('set', 'axe', tAxeText);                                 

        if aspectRatio('get') == true      

            x = computeAspectRatio('x', atMetaData);
            y = computeAspectRatio('y',atMetaData);
            z = 1;

            daspect(axefPtr('get'), [x y z]); 
            daspect(axePtr('get') , [x y z]); 
        else
            x =1;
            y =1;
            z =1;

            daspect(axefPtr('get'), [x y z]);  
            daspect(axePtr('get') , [x y z]);  

            axis(axefPtr('get'), 'normal');                    
            axis(axePtr('get') , 'normal');                    
        end

        aspectRatioValue('set', 'x', x);
        aspectRatioValue('set', 'y', y);
        aspectRatioValue('set', 'z', z);

        if isFusion('get') == true
            alpha(axePtr('get'), 1-sliderAlphaValue('get'));
        end

        set(axePtr('get'), 'CLim', [lMin lMax]);
        if isFusion('get')

            lFusionMin = fusionWindowLevel('get', 'min');   
            lFusionMax = fusionWindowLevel('get', 'max'); 

            set(axefPtr('get'), 'CLim', [lFusionMin lFusionMax]);
       end               
    else                

        set(btn3DPtr('get')        , 'Enable', 'on');                        
        set(btnIsoSurfacePtr('get'), 'Enable', 'on');                        
        set(btnMIPPtr('get')       , 'Enable', 'on');                        

        im = im(:,:,:);
        imf = imf(:,:,:);

        sliceNumber('set', 'coronal' , floor(size(im,1)/2));
        sliceNumber('set', 'sagittal', floor(size(im,2)/2));
        sliceNumber('set', 'axial'   , floor(size(im,3)/2));   

        iCoronal  = sliceNumber('get', 'coronal' );
        iSagittal = sliceNumber('get', 'sagittal');
        iAxial    = sliceNumber('get', 'axial'   );

        iCoronalSize  = size(im,1);
        iSagittalSize = size(im,2);
        iAxialSize    = size(im,3);
                          
        axesText('set', 'axes1', '');

        cla(axes1fPtr('get'),'reset');
        cla(axes1Ptr('get') ,'reset');                

        set(axes1fPtr('get'), ...
            'Units'   , 'normalized', ...
            'Position', [0 0 1 1], ...
            'Visible' , 'off', ...
            'Ydir'    ,'reverse', ...
            'XLim'    , [0 inf], ...
            'YLim'    , [0 inf], ...
            'CLim'    , [0 inf]);
        
        set(axes1Ptr('get') , ...
            'Units'   , 'normalized', ...
            'Position', [0 0 1 1], ...
            'Visible' , 'off', ...
            'Ydir'    ,'reverse', ...
            'XLim'    , [0 inf], ...
            'YLim'    , [0 inf], ...
            'CLim'    , [0 inf] ...
            );


        if isVsplash('get') == true && ...
           (strcmpi(vSplahView('get'), 'coronal') || ...
            strcmpi(vSplahView('get'), 'all'))

            if strcmpi(vSplahView('get'), 'coronal')
                set(uiCorWindowPtr('get'),  ...
                    'Position', [0 ...
                                 addOnWidth('get')+30+15 ...
                                 getMainWindowSize('xsize') ...
                                 getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30-15 ...
                                 ] ...
                    );

                 set(uiSliderCorPtr('get'), ...
                     'position', [0 ...
                                  addOnWidth('get')+30 ...
                                  getMainWindowSize('xsize') ...
                                  15 ...
                                  ] ...
                    );                           

            else
                set(uiCorWindowPtr('get'),  ...
                    'position', [0 ...
                                 addOnWidth('get')+30+15 ...
                                 getMainWindowSize('xsize')/4 ...
                                 getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30-15 ...
                                 ]...
                   );

                 set(uiSliderCorPtr('get'),  ...
                     'position', [0 ...
                                  addOnWidth('get')+30 ...
                                  getMainWindowSize('xsize')/4 ...
                                  15 ...
                                  ] ...
                     );                                                   
            end

            dVsplashLayoutX = vSplashLayout('get', 'x');
            dVsplashLayoutY = vSplashLayout('get', 'y');

            [lFirst, lLast] = computeVsplashLayout(im, 'coronal', iCoronal);

            if gaussFilter('get') == true
                imCoronalF = montage(imgaussfilt(permute(imf(:,:,:), [3 2 1])), ...
                                     'Size'   , [dVsplashLayoutY dVsplashLayoutX], ...
                                     'Indices', lFirst:lLast, ...
                                     'Parent' , axes1fPtr('get') ...
                                     );  
                                
                imCoronal  = montage(imgaussfilt(permute(im (:,:,:), [3 2 1])), ...
                                     'Size'   , [dVsplashLayoutY dVsplashLayoutX], ...
                                     'Indices', lFirst:lLast, ...
                                     'Parent' , axes1Ptr('get') ...
                                     );                         
            else
                imCoronalF = montage(permute(imf(:,:,:), [3 2 1]), ...
                                     'Size'   , [dVsplashLayoutY dVsplashLayoutX], ...
                                     'Indices', lFirst:lLast, ...
                                     'Parent' , axes1fPtr('get') ...
                                     );  
                                 
                imCoronal  = montage(permute(im (:,:,:), [3 2 1]), ...
                                     'Size'   , [dVsplashLayoutY dVsplashLayoutX], ...
                                     'Indices', lFirst:lLast, ...
                                     'Parent' , axes1Ptr('get') ...
                                     );                    
            end

            imCoronalPtr ('set', imCoronal );
            imCoronalFPtr('set', imCoronalF); 

            imComputed = computeMontage(im, 'coronal', iCoronal);

            imAxSize = size(imCoronal.CData);
            imComputed = imresize(imComputed, [imAxSize(1) imAxSize(2)]);    

            imCoronal.CData = imComputed; 

            if isFusion('get') == true
                imComputed = computeMontage(imf, 'coronal', iCoronal);

                imAxSize = size(imCoronalF.CData);
                imComputed = imresize(imComputed, [imAxSize(1) imAxSize(2)]);    

                imCoronalF.CData = imComputed;                         
            end

            xOffset = imCoronal.XData(2)/dVsplashLayoutX;
            yOffset = imCoronal.YData(2)/dVsplashLayoutY;

            iPointerOffset=1;
            for hh=1:dVsplashLayoutY
                for jj=1:dVsplashLayoutX
                    
                    ptMontageAxes1{iPointerOffset} = ...
                        text(axes1Ptr('get'), ...
                             (jj-1)*xOffset, (hh-1)*yOffset, ...
                             sprintf('\n%s', num2str(lFirst+iPointerOffset-1)), ...
                             'Color'       , overlayColor('get') ...
                             );
                         
                    if overlayActivate('get') == false
                        set(ptMontageAxes1{iPointerOffset}, 'Visible', 'off');    
                    end                            
                    iPointerOffset = iPointerOffset+1;
               end
            end

            montageText('set', 'axes1', ptMontageAxes1);

        else
            set(uiCorWindowPtr('get'), ...
                'position', [0 ...                
                             addOnWidth('get')+30+15 ...
                             getMainWindowSize('xsize')/4 ...
                             getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30-15 ...
                             ] ...
                );

            set(uiSliderCorPtr('get'), 'position', ...
                [0 ...
                 addOnWidth('get')+30 ...
                 getMainWindowSize('xsize')/4 ...
                 15] ...
                );                        

            if is3DEngine('get') == true
                if gaussFilter('get') == true
                    imCoronalF = surface(imgaussfilt(permute(imf(iCoronal,:,:), [3 2 1]), 1), ...
                                         'linestyle', 'none', ...
                                         'Parent'   , axes1fPtr('get') ...
                                         ); 
                                     
                    imCoronal  = surface(imgaussfilt(permute(im (iCoronal,:,:), [3 2 1]), 1), ...
                                         'linestyle', 'none', ...
                                         'Parent'   , axes1Ptr('get') ...
                                         ); 
                else      
                    imCoronalF = surface(permute(imf(iCoronal,:,:), [3 2 1]), ...
                                         'linestyle','none', ...
                                         'Parent'   , axes1fPtr('get') ...
                                         ); 
                                     
                    imCoronal  = surface(permute(im (iCoronal,:,:), [3 2 1]), ...
                                         'linestyle', 'none', ...
                                         'Parent'   , axes1Ptr('get') ...
                                         ); 
                end

                if isShading('get')
                    shading(axes1fPtr('get'), 'interp');
                    shading(axes1Ptr('get') , 'interp');
                else
                    shading(axes1fPtr('get'), 'flat');
                    shading(axes1Ptr('get') , 'flat');
               end
            else
                 if gaussFilter('get') == true
                    imCoronalF = imagesc(imgaussfilt(permute(imf(iCoronal,:,:), [3 2 1])), ...
                                         'Parent', axes1fPtr('get') ...
                                         );                                                                
                                    
                    imCoronal  = imagesc(imgaussfilt(permute(im (iCoronal,:,:), [3 2 1])), ...
                                         'Parent', axes1Ptr('get') ...
                                         );                                                                
                else
                    imCoronalF = imagesc(permute(imf(iCoronal,:,:), [3 2 1]),  ...
                                         'Parent', axes1fPtr('get') ...
                                         );        
                                     
                    imCoronal  = imagesc(permute(im (iCoronal,:,:), [3 2 1]), ...
                                         'Parent', axes1Ptr('get') ...
                                         );        
                 end
            end

            imCoronalPtr ('set', imCoronal );
            imCoronalFPtr('set', imCoronalF); 

        end

        linkaxes([axes1Ptr('get') axes1fPtr('get')],'xy');                
        set(axes1Ptr('get') , 'Visible', 'off');
        set(axes1fPtr('get'), 'Visible', 'off');

        if isFusion('get') == false
            set(imCoronalF, 'Visible', 'off');                                       
        end

%                set(axes1Ptr('get'), 'CLim', [aCLim(1) aCLim(2)]);

%            if crossActivate('get')
%                    hold on  
        if isVsplash('get') == false

            alAxes1Line{1} = line(axes1Ptr('get'), ...
                 [iSagittalSize/2 iSagittalSize/2], ...
                 [iAxial+1 iAxial-1], ...
                 'Color', crossColor('get'));

            alAxes1Line{2} = line(axes1Ptr('get'), ...
                 [iSagittalSize/2+1 iSagittalSize/2-1], ...
                 [iAxial iAxial], ...
                 'Color', crossColor('get'));

            alAxes1Line{3} = line(axes1Ptr('get'), ...
                 [0 iSagittalSize/2-crossSize('get')], ...
                 [iAxial iAxial], ...
                 'Color', crossColor('get'));

            alAxes1Line{4} = line(axes1Ptr('get'), ...
                 [iSagittalSize  /2+crossSize('get') iSagittalSize], ...
                 [iAxial iAxial], ...
                 'Color', crossColor('get'));

            alAxes1Line{5} = line(axes1Ptr('get'), ...
                 [iSagittal iSagittal], ...
                 [0 iAxialSize/2-crossSize('get')], ...
                 'Color', crossColor('get'));

            alAxes1Line{6} = line(axes1Ptr('get'), ...
                 [iSagittal iSagittal], ...
                 [iAxialSize/2+crossSize('get') iAxialSize], ...
                 'Color', crossColor('get'));                  
%                    hold off    
             axesLine('set', 'axes1', alAxes1Line);
%            end

             for ii1=1:numel(alAxes1Line)    
                 if is3DEngine('get') == true                     
                    alAxes1Line{ii1}.ZData = [max(max(get(imCoronal,'Zdata'))) max(max(get(imCoronal,'Zdata')))];
                 end
                 alAxes1Line{ii1}.Visible = crossActivate('get');
             end
        end                      

        uiCorWindow = uiCorWindowPtr('get');
        axAxes1Text = axes(uiCorWindow, ...
                           'Units'    , 'pixels', ...
                           'position' , [5 ...
                                         (uiCorWindow.Position(4)-15) ...
                                         70 ...
                                         30 ...
                                         ], ...
                           'visible'  , 'off' ...
                           );     
                       
        if isVsplash('get') == true && ...
           strcmpi(vSplahView('get'), 'coronal') 
            sAxe1Text = sprintf('\n%s\n%s\n%s\n%s\nC:%s-%s/%s', ...
                            sPatientName, ...
                            sPatientID, ...
                            sSeriesDescription, ...
                            sSeriesDate, ...
                            num2str(lFirst), ...
                            num2str(lLast), ...
                            num2str(size(dicomBuffer('get'), 1)) ...
                            );
                        
            tAxes1Text = text(axAxes1Text, ...
                              0, ...
                              0, ...
                              sAxe1Text, ...
                              'Color', overlayColor('get') ...
                              );                    
                          
        elseif isVsplash('get') == true && ...
               strcmpi(vSplahView('get'), 'all')                
            tAxes1Text  = text(axAxes1Text, ...
                               0, ...
                               0, ...
                               ['C:' num2str(lFirst) '-' num2str(lLast) '/' num2str(size(dicomBuffer('get'), 1))], ...
                               'Color', overlayColor('get') ...
                               );                    
        else
            tAxes1Text  = text(axAxes1Text, ...
                               0, ...
                               0, ...
                               ['C:' num2str(sliceNumber('get', 'coronal' )) '/' num2str(size(dicomBuffer('get'), 1))] , ...
                               'Color', overlayColor('get') ...
                               );
        end 
        if overlayActivate('get') == false
            set(tAxes1Text, 'Visible', 'off');
        end                
        axesText('set', 'axes1', tAxes1Text);

        axesText('set', 'axes2', '');

        cla(axes2fPtr('get'),'reset');
        cla(axes2Ptr('get') ,'reset');               

        set(axes2fPtr('get'), ...
            'Units'   , 'normalized', ...
            'Position', [0 0 1 1], ...
            'Visible' , 'off', ...
            'Ydir'    ,'reverse', ...
            'XLim'    , [0 inf], ...
            'YLim'    , [0 inf], ...
            'CLim'    , [0 inf] ...
            );
        
        set(axes2Ptr('get') , ...
            'Units'   , 'normalized', ...
            'Position', [0 0 1 1], ...
            'Visible' , 'off', ...
            'Ydir'    ,'reverse', ...
            'XLim'    , [0 inf], ...
            'YLim'    , [0 inf], ...
            'CLim'    , [0 inf] ...
            );            

        if isVsplash('get') == true && ...
           (strcmpi(vSplahView('get'), 'sagittal') || ...
            strcmpi(vSplahView('get'), 'all'))

            if strcmpi(vSplahView('get'), 'sagittal')
                set(uiSagWindowPtr('get'),  ...
                    'Position',[0 ...
                                addOnWidth('get')+30+15 ...
                                getMainWindowSize('xsize') ...
                                getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30-15 ...
                                ] ...
                    );

                 set(uiSliderSagPtr('get'), ...
                     'position', [0 ...
                                  addOnWidth('get')+30 ...
                                  getMainWindowSize('xsize') ...
                                  15 ...
                                  ] ...
                     );                           

            else
                set(uiSagWindowPtr('get'), ...
                    'position', [getMainWindowSize('xsize')/4 ...
                                 addOnWidth('get')+30+15 ...
                                 getMainWindowSize('xsize')/4 ...
                                 getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30-15 ...
                                 ]...
                   );

                 set(uiSliderSagPtr('get'), 'position', ...
                     [getMainWindowSize('xsize')/4 ...
                      addOnWidth('get')+30 ...
                      getMainWindowSize('xsize')/4 ...
                      15] ...
                    );                                                   
            end

            dVsplashLayoutX = vSplashLayout('get', 'x');
            dVsplashLayoutY = vSplashLayout('get', 'y');

            [lFirst, lLast] = computeVsplashLayout(im, 'sagittal', iSagittal);

            if gaussFilter('get') == true
                imSagittalF = montage(imgaussfilt(permute(imf(:,:,:), [3 1 2])), ...
                                      'Size'   , [dVsplashLayoutY dVsplashLayoutX], ...
                                      'Indices', lFirst:lLast, ...
                                      'Parent' , axes2fPtr('get') ...
                                      );  
                                  
                imSagittal  = montage(imgaussfilt(permute(im (:,:,:), [3 1 2])), ...
                                      'Size'   , [dVsplashLayoutY dVsplashLayoutX], ...
                                      'Indices', lFirst:lLast, ...
                                      'Parent' , axes2Ptr('get') ...
                                      );                          
            else                    
                imSagittalF = montage(permute(imf(:,:,:), [3 1 2]), ...
                                      'Size'   , [dVsplashLayoutY dVsplashLayoutX], ...
                                      'Indices', lFirst:lLast, ...
                                      'Parent' , axes2fPtr('get') ...
                                      );  
                                  
                imSagittal  = montage(permute(im (:,:,:), [3 1 2]), ...
                                      'Size'   , [dVsplashLayoutY dVsplashLayoutX], ...
                                      'Indices', lFirst:lLast, ...
                                      'Parent' , axes2Ptr('get') ...
                                      );                    
            end
            imSagittalPtr ('set', imSagittal );
            imSagittalFPtr('set', imSagittalF);

            imComputed = computeMontage(im, 'sagittal', iSagittal);

            imAxSize = size(imSagittal.CData);
            imComputed = imresize(imComputed, [imAxSize(1) imAxSize(2)]);    

            imSagittal.CData = imComputed; 

            if isFusion('get') == true
                imComputed = computeMontage(imf, 'sagittal', iSagittal);

                imAxSize = size(imSagittalF.CData);
                imComputed = imresize(imComputed, [imAxSize(1) imAxSize(2)]);    

                imSagittalF.CData = imComputed;                         
            end

            xOffset = imSagittal.XData(2)/dVsplashLayoutX;
            yOffset = imSagittal.YData(2)/dVsplashLayoutY;

            iPointerOffset=1;
            for hh=1:dVsplashLayoutY
                for jj=1:dVsplashLayoutX
                    
                    ptMontageAxes2{iPointerOffset} = ...
                        text(axes2Ptr('get'), ...
                             (jj-1)*xOffset , ...
                             (hh-1)*yOffset , ...
                             sprintf('\n%s' , ...
                             num2str(lFirst+iPointerOffset-1)), ...
                             'Color', overlayColor('get') ...
                             );
                         
                    if overlayActivate('get') == false
                        set(ptMontageAxes2{iPointerOffset}, 'Visible', 'off');    
                    end                            
                    iPointerOffset = iPointerOffset+1;
               end
            end

            montageText('set', 'axes2', ptMontageAxes2);   

        else
            set(uiSagWindowPtr('get'),  ...
                'position', [getMainWindowSize('xsize')/4 ...
                             addOnWidth('get')+30+15 ...
                             getMainWindowSize('xsize')/4 ...
                             getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30-15 ...
                             ]...
                );

             set(uiSliderSagPtr('get'), ...
                 'position', [getMainWindowSize('xsize')/4 ...
                              addOnWidth('get')+30 ...
                              getMainWindowSize('xsize')/4 ...
                              15 ...
                              ] ...
                 );        

            if is3DEngine('get') == true
                if gaussFilter('get') == true
                    imSagittalF = surface(imgaussfilt(permute(imf(:,iSagittal,:), [3 1 2]),1), ...
                                          'linestyle', 'none', ...
                                          'Parent'   , axes2fPtr('get') ...
                                          );
                                      
                    imSagittal  = surface(imgaussfilt(permute(im (:,iSagittal,:), [3 1 2]),1), ...
                                          'linestyle', 'none', ...
                                          'Parent'   , axes2Ptr('get') ...
                                          );
                else    
                    imSagittalF = surface(permute(imf(:,iSagittal,:), [3 1 2]), ...
                                          'linestyle', 'none', ...
                                          'Parent'   , axes2fPtr('get') ...
                                          );
                                      
                    imSagittal  = surface(permute(im (:,iSagittal,:), [3 1 2]), ...
                                          'linestyle', 'none', ...
                                          'Parent', axes2Ptr('get') ...
                                          );
                end

                if isShading('get')
                    shading(axes2fPtr('get'), 'interp');
                    shading(axes2Ptr('get') , 'interp');
                else
                    shading(axes2fPtr('get'), 'flat');
                    shading(axes2Ptr('get') , 'flat');
                end

            else                    
                 if gaussFilter('get') == true
                    imSagittalF  = imagesc(imgaussfilt(permute(imf(:,iSagittal,:), [3 1 2])), ...
                                           'Parent', axes2fPtr('get') ...
                                           );                                                                
                                       
                    imSagittal   = imagesc(imgaussfilt(permute(im (:,iSagittal,:), [3 1 2])), ...
                                           'Parent', axes2Ptr('get') ...
                                           );                                                                
                else
                    imSagittalF  = imagesc(permute(imf(:,iSagittal,:), [3 1 2]), ...
                                           'Parent', axes2fPtr('get') ...
                                           );                                                                
                                       
                    imSagittal   = imagesc(permute(im (:,iSagittal,:), [3 1 2]), ...
                                           'Parent', axes2Ptr('get') ...
                                           );                                                                
                 end
            end

            imSagittalPtr ('set', imSagittal );
            imSagittalFPtr('set', imSagittalF);
       end

        linkaxes([axes2Ptr('get') axes2fPtr('get')],'xy');                
        set(axes2Ptr('get') , 'Visible', 'off');
        set(axes2fPtr('get'), 'Visible', 'off');

        if isFusion('get') == false
            set(imSagittalF, 'Visible', 'off');                                       
        end                                                                                    
%              if crossActivate('get')
%                    hold on  
        if isVsplash('get') == false

            alAxes2Line{1} = line(axes2Ptr('get'), ...
                 [iCoronalSize/2 iCoronalSize/2], ...
                 [iAxial+1 iAxial-1], ...
                 'Color', crossColor('get'));

            alAxes2Line{2} = line(axes2Ptr('get'), ...
                 [iCoronalSize/2+1 iCoronalSize/2-1], ...
                 [iAxial iAxial], ...
                 'Color', crossColor('get'));

            alAxes2Line{3} = line(axes2Ptr('get'), ...
                 [0 iCoronalSize/2-crossSize('get')], ...
                 [iAxial iAxial], ...
                 'Color', crossColor('get'));

            alAxes2Line{4} = line(axes2Ptr('get'), ...
                 [iCoronalSize/2+crossSize('get') iCoronalSize], ...
                 [iAxial iAxial], ...
                 'Color', crossColor('get'));

            alAxes2Line{5} = line(axes2Ptr('get'), ...
                 [iCoronal iCoronal], ...
                 [0 iAxialSize/2-crossSize('get')], ...
                 'Color', crossColor('get'));

            alAxes2Line{6} = line(axes2Ptr('get'), ...
                 [iCoronal iCoronal], ...
                 [iAxialSize/2+crossSize('get') iAxialSize], ...
                 'Color', crossColor('get'));  

            axesLine('set', 'axes2', alAxes2Line);

             for ii2=1:numel(alAxes2Line)    
                if is3DEngine('get') == true
                    alAxes2Line{ii2}.ZData = [max(max(get(imSagittal,'Zdata'))) max(max(get(imSagittal,'Zdata')))];
                end
                alAxes2Line{ii2}.Visible = crossActivate('get');
             end
        end
%                    hold off  
%              end

        uiSagWindow = uiSagWindowPtr('get');
        axAxes2Text = axes(uiSagWindow, ...
                           'Units'   , 'pixels', ...
                           'position', [5 (uiSagWindow.Position(4)-15) 70 30], ...
                           'visible' , 'off' ...
                           );
                       
        if isVsplash('get') == true && ...
           strcmpi(vSplahView('get'), 'sagittal') 
            sAxe2Text  = sprintf('\n%s\n%s\n%s\n%s\nS:%s-%s/%s', ...
                            sPatientName, ...
                            sPatientID, ...
                            sSeriesDescription, ...
                            sSeriesDate, ...
                            num2str(lFirst), ...
                            num2str(lLast), ...
                            num2str(size(dicomBuffer('get'), 2)) ...
                            );
            ptAxes2Text = text(axAxes2Text, 0, 0, sAxe2Text, 'Color', overlayColor('get'));   
        elseif isVsplash('get') == true && ...
               strcmpi(vSplahView('get'), 'all')
            ptAxes2Text = text(axAxes2Text, ...
                               0, ...
                               0, ...
                               ['S:' num2str(lFirst) '-' num2str(lLast) '/' num2str(size(dicomBuffer('get'), 2))], ...
                               'Color', overlayColor('get') ...
                               );                                       
        else
            ptAxes2Text = text(axAxes2Text, ...
                               0, ...
                               0, ...
                               ['S:' num2str(sliceNumber('get', 'sagittal')) '/' num2str(size(dicomBuffer('get'), 2))], ...
                               'Color', overlayColor('get') ...
                               );
        end
        
        if overlayActivate('get') == false
            set(ptAxes2Text, 'Visible', 'off');
        end                  
        axesText('set', 'axes2', ptAxes2Text);

        axesText('set', 'axes3', '');

        cla(axes3fPtr('get'),'reset');
        cla(axes3Ptr('get') ,'reset');

        set(axes3fPtr('get'), ...
            'Units'   , 'normalized', ...
            'Position', [0 0 1 1], ...
            'Visible' , 'off', ...
            'Ydir'    ,'reverse', ...
            'XLim'    , [0 inf], ...
            'YLim'    , [0 inf], ...
            'CLim'    , [0 inf] ...
            );
        
        set(axes3Ptr('get') , ...
            'Units'   , 'normalized', ...
            'Position', [0 0 1 1], ...
            'Visible' , 'off', ...
            'Ydir'    , 'reverse', ...
            'XLim'    , [0 inf], ...
            'YLim'    , [0 inf], ...
            'CLim'    , [0 inf] ...
            );              

        if isVsplash('get') == true && ...
           (strcmpi(vSplahView('get'), 'axial') || ...
            strcmpi(vSplahView('get'), 'all'))

            if strcmpi(vSplahView('get'), 'axial')
                set(uiTraWindowPtr('get'), ...
                    'position', [0 ...                    
                                 addOnWidth('get')+30+15 ...
                                 getMainWindowSize('xsize') ...
                                 getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30-15 ...
                                 ]...
                    );

                 set(uiSliderTraPtr('get'), ...
                     'position', [0 ...                     
                                  addOnWidth('get')+30 ...
                                  getMainWindowSize('xsize') ...
                                  15 ...
                                  ] ...
                     );                          

            else
                set(uiTraWindowPtr('get'), ...
                    'position', [(getMainWindowSize('xsize')/2) ...                    
                                 addOnWidth('get')+30+15 ...
                                 getMainWindowSize('xsize')/2 ...
                                 getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30-15 ...
                                 ]...
                    );

                 set(uiSliderTraPtr('get'), ...
                     'position', [(getMainWindowSize('xsize')/2) ...                     
                                  addOnWidth('get')+30 ...
                                  getMainWindowSize('xsize')/2 ...
                                  15 ...
                                  ] ...
                     );                                                   
            end   

            dVsplashLayoutX = vSplashLayout('get', 'x');
            dVsplashLayoutY = vSplashLayout('get', 'y');

            [lFirst, lLast] = computeVsplashLayout(im, 'axial', iAxial);

            if gaussFilter('get') == true                    
                imAxialF = montage(imgaussfilt(imf), ...
                                   'Size'   , [dVsplashLayoutY dVsplashLayoutX], ...
                                   'Indices', lFirst:lLast, ...
                                   'Parent' , axes3fPtr('get') ...
                                   );  
                               
                imAxial  = montage(imgaussfilt(im ), ...
                                   'Size'   , [dVsplashLayoutY dVsplashLayoutX], ...
                                   'Indices', lFirst:lLast, ...
                                   'Parent' , axes3Ptr('get') ...
                                   ); 
            else
                imAxialF = montage(imf     , ...
                                  'Size'   , [dVsplashLayoutY dVsplashLayoutX], ...
                                  'Indices', lFirst:lLast, ...
                                  'Parent' , axes3fPtr('get') ...
                                  );  
                              
                imAxial  = montage(im , ...
                                   'Size'   , [dVsplashLayoutY dVsplashLayoutX], ...
                                   'Indices', lFirst:lLast, ...
                                   'Parent' , axes3Ptr('get') ...
                                   );                    
            end

            imAxialPtr ('set', imAxial );
            imAxialFPtr('set', imAxialF);

            imComputed = computeMontage(im(:,:,end:-1:1), ...
                                        'axial', ...
                                        size(dicomBuffer('get'), 3)-sliceNumber('get', 'axial')+1 ...
                                        );

            imAxSize = size(imAxial.CData);
            imComputed = imresize(imComputed, [imAxSize(1) imAxSize(2)]);   

            imAxial.CData = imComputed; 
            if isFusion('get') == true
                imComputed = computeMontage(imf(:,:,end:-1:1), ...
                                            'axial', size(dicomBuffer('get'), 3)-sliceNumber('get', 'axial')+1 ...
                                            );

                imAxSize = size(imAxialF.CData);
                imComputed = imresize(imComputed, [imAxSize(1) imAxSize(2)]);   

                imAxialF.CData = imComputed;
            end

            [lFirst, ~] = computeVsplashLayout(im, ...
                                               'axial', ...
                                               size(dicomBuffer('get'), 3)-iAxial+1 ...
                                               );                   

            xOffset = imAxial.XData(2)/dVsplashLayoutX;
            yOffset = imAxial.YData(2)/dVsplashLayoutY;

            iPointerOffset=1;
            for hh=1:dVsplashLayoutY
                for jj=1:dVsplashLayoutX
                    ptMontageAxes3{iPointerOffset} = ...
                        text(axes3Ptr('get'), ...
                             (jj-1)*xOffset , ...
                             (hh-1)*yOffset , ...
                             sprintf('\n%s', num2str(lFirst+iPointerOffset-1)), ...
                             'Color', overlayColor('get') ...
                             );
                         
                    if overlayActivate('get') == false
                        set(ptMontageAxes3{iPointerOffset}, 'Visible', 'off');    
                    end                            
                    iPointerOffset = iPointerOffset+1;
               end
            end

            montageText('set', 'axes3', ptMontageAxes3);   

        else
            if is3DEngine('get') == true
                if gaussFilter('get') == true
                    imAxialF = surface(imgaussfilt(imf(:,:,iAxial),1), ...
                                       'linestyle', 'none', ...
                                       'Parent'   , axes3fPtr('get') ...
                                       ); 
                                   
                    imAxial  = surface(imgaussfilt(im (:,:,iAxial),1), ...
                                       'linestyle', 'none', ...
                                       'Parent'   , axes3Ptr('get') ...
                                       ); 
                else
                   imAxialF = surface(imf(:,:,iAxial), ...
                                      'linestyle', 'none', ...
                                      'Parent'   , axes3fPtr('get') ...
                                      ); 
                                  
                   imAxial  = surface(im (:,:,iAxial), ...
                                      'linestyle', 'none', ...
                                      'Parent'   , axes3Ptr('get') ...
                                      ); 
                end

                if isShading('get')
                    shading(axes3fPtr('get'), 'interp');
                    shading(axes3Ptr('get') , 'interp');
                else
                    shading(axes3fPtr('get'), 'flat');
                    shading(axes3Ptr('get') , 'flat');
                end                    

            else
                if gaussFilter('get') == true
                    imAxialF = imagesc(imgaussfilt(imf(:,:,iAxial)), ...
                                       'Parent', axes3fPtr('get') ...
                                       );                                                                
                                   
                    imAxial  = imagesc(imgaussfilt(im (:,:,iAxial)),  ...
                                       'Parent', axes3Ptr('get') ...
                                       );                                                                
                else
                   imAxialF = imagesc(imf(:,:,iAxial),  ...
                                      'Parent', axes3fPtr('get') ...
                                      );                                                                
                                  
                   imAxial  = imagesc(im (:,:,iAxial),  ...
                                      'Parent', axes3Ptr('get') ...
                                      );                                                                
                end

            end

            imAxialPtr ('set', imAxial );
            imAxialFPtr('set', imAxialF);

        end

        linkaxes([axes3Ptr('get') axes3fPtr('get')],'xy');                
        set(axes3Ptr('get') , 'Visible', 'off');
        set(axes3fPtr('get'), 'Visible', 'off');

        if isFusion('get') == false
            set(imAxialF, 'Visible', 'off');                                       
        end 

        if isVsplash('get') == false
%                if crossActivate('get')
%                    hold on
            alAxes3Line{1} = line(axes3Ptr('get'), ...
                 [iSagittalSize/2 iSagittalSize/2], ...
                 [iCoronal+1 iCoronal-1], ...
                 'Color', crossColor('get'));

            alAxes3Line{2} = line(axes3Ptr('get'), ...
                 [iSagittalSize/2+1 iSagittalSize/2-1], ...
                 [iCoronal iCoronal], ...
                 'Color', crossColor('get'));

            alAxes3Line{3} = line(axes3Ptr('get'), ...
                 [0 iSagittalSize/2-crossSize('get')], ...
                 [iCoronal iCoronal], ...
                 'Color', crossColor('get'));

            alAxes3Line{4} = line(axes3Ptr('get'), ...
                 [iSagittalSize/2+crossSize('get') iSagittalSize], ...
                 [iCoronal iCoronal], ...
                 'Color', crossColor('get'));

            alAxes3Line{5} = line(axes3Ptr('get'), ...
                 [iSagittal iSagittal], ...
                 [0 iCoronalSize/2-crossSize('get')], ...
                 'Color', crossColor('get'));

            alAxes3Line{6} = line(axes3Ptr('get'), ...
                 [iSagittal iSagittal], ...
                 [iCoronalSize/2+crossSize('get') iCoronalSize], ...
                 'Color', crossColor('get'));

            axesLine('set', 'axes3', alAxes3Line);

%                    hold off
%                end

             for ii3=1:numel(alAxes3Line)  
                if is3DEngine('get') == true
                    alAxes3Line{ii3}.ZData = [max(max(get(imAxial,'Zdata'))) max(max(get(imAxial,'Zdata')))];
                end
                alAxes3Line{ii3}.Visible = crossActivate('get');
             end
        end

        uiTraWindow = uiTraWindowPtr('get');
        axAxes3Text = ...
            axes(uiTraWindow, ...
                 'Units'   , 'pixels', ...
                 'position', [25 ...
                              (uiTraWindow.Position(4)-getTopWindowSize('ysize')) ...
                              100 ...
                              200 ...
                              ], ...
                 'visible' , 'off' ...
                 );                 
                       
        if isVsplash('get') == true && ...
           (strcmpi(vSplahView('get'), 'axial') || ...
            strcmpi(vSplahView('get'), 'all'))                
            [lFirst, lLast] = computeVsplashLayout(im, ...
                                                   'axial', ...
                                                   size(dicomBuffer('get'), 3)-sliceNumber('get', 'axial')+1 ...
                                                   );
                                               
            sAxe3Text = sprintf('\n%s\n%s\n%s\n%s\nA:%s-%s/%s', ...
                            sPatientName, ...
                            sPatientID, ...
                            sSeriesDescription, ...
                            sSeriesDate, ...
                            num2str(lFirst), ...
                            num2str(lLast), ...
                            num2str(size(dicomBuffer('get'), 3)) ...
                            );
        else    
            sAxe3Text = sprintf('\n%s\n%s\n%s\n%s\nA:%s/%s', ...
                            sPatientName, ...
                            sPatientID, ...
                            sSeriesDescription, ...
                            sSeriesDate, ...
                            num2str(sliceNumber('get', 'axial')), ...
                            num2str(size(dicomBuffer('get'), 3)) ...
                            );
        end    
        tAxes3Text  = text(axAxes3Text, 0, 0, sAxe3Text, 'Color', overlayColor('get'));                  
        if overlayActivate('get') == false
            set(tAxes3Text, 'Visible', 'off');
        end                  
        axesText('set', 'axes3', tAxes3Text);                  

        if aspectRatio('get') == true

            atCoreMetaData = dicomMetaData('get');         

            if ~isempty(atCoreMetaData{1}.PixelSpacing)
                x = atCoreMetaData{1}.PixelSpacing(1);
                y = atCoreMetaData{1}.PixelSpacing(2);                                                   
                z = computeSliceSpacing(atCoreMetaData);                   

                if x == 0
                    x = 1;
                end

                if y == 0
                    y = 1;
                end                    

                if z == 0
                    z = x;
                end
            else

                x = computeAspectRatio('x', atCoreMetaData);
                y = computeAspectRatio('y', atCoreMetaData);
                z = 1;                      
            end

           if strcmp(imageOrientation('get'), 'axial') 
                daspect(axes1Ptr('get'), [z x y]); 
                daspect(axes2Ptr('get'), [z y x]); 
                daspect(axes3Ptr('get'), [x y z]); 

           elseif strcmp(imageOrientation('get'), 'coronal') 
                daspect(axes1Ptr('get'), [x y z]); 
                daspect(axes2Ptr('get'), [y z x]); 
                daspect(axes3Ptr('get'), [z x y]);       

            elseif strcmp(imageOrientation('get'), 'sagittal')  
                daspect(axes1Ptr('get'), [y x z]); 
                daspect(axes2Ptr('get'), [x z y]); 
                daspect(axes3Ptr('get'), [z x y]);                                                                        
           end

           if isFusion('get') == true

               xf = fusionAspectRatioValue('get', 'x');
               yf = fusionAspectRatioValue('get', 'y');
               zf = fusionAspectRatioValue('get', 'z');

               if strcmp(imageOrientation('get'), 'axial') 
                    daspect(axes1fPtr('get'), [zf xf yf]); 
                    daspect(axes2fPtr('get'), [zf yf xf]); 
                    daspect(axes3fPtr('get'), [xf yf zf]); 

               elseif strcmp(imageOrientation('get'), 'coronal') 
                    daspect(axes1fPtr('get'), [xf yf zf]); 
                    daspect(axes2fPtr('get'), [yf zf xf]); 
                    daspect(axes3fPtr('get'), [zf xf yf]);       

                elseif strcmp(imageOrientation('get'), 'sagittal')  
                    daspect(axes1fPtr('get'), [yf xf zf]); 
                    daspect(axes2fPtr('get'), [xf zf yf]); 
                    daspect(axes3fPtr('get'), [zf xf yf]);                                                                        
               end 
            end
        else
            x =1;
            y =1;
            z =1;

            daspect(axes1Ptr('get'), [z x y]); 
            daspect(axes2Ptr('get'), [z y x]); 
            daspect(axes3Ptr('get'), [x y z]);                    

            axis(axes1Ptr('get'), 'normal');
            axis(axes2Ptr('get'), 'normal');                    
            axis(axes3Ptr('get'), 'normal');   

            if isFusion('get')
                daspect(axes1fPtr('get'), [z x y]); 
                daspect(axes2fPtr('get'), [z y x]); 
                daspect(axes3fPtr('get'), [x y z]);                    

                axis(axes1fPtr('get'), 'normal');
                axis(axes2fPtr('get'), 'normal');                    
                axis(axes3fPtr('get'), 'normal');                        
            end
        end

        aspectRatioValue('set', 'x', x);
        aspectRatioValue('set', 'y', y);
        aspectRatioValue('set', 'z', z);                

        % Need to clear some space for the colorbar
        if isVsplash('get') == true && ...
           ~strcmpi(vSplahView('get'), 'all')

            if strcmpi(vSplahView('get'), 'coronal')
                set(axes1Ptr('get') , 'Position', [0 0 0.9500 1]);
                set(axes1fPtr('get'), 'Position', [0 0 0.9500 1]);                        
            elseif strcmpi(vSplahView('get'), 'sagittal')
                set(axes2Ptr('get') , 'Position', [0 0 0.9500 1]);
                set(axes2fPtr('get'), 'Position', [0 0 0.9500 1]);                        
            else
                set(axes3Ptr('get') , 'Position', [0 0 0.9500 1]);
                set(axes3fPtr('get'), 'Position', [0 0 0.9500 1]);                        
            end
        else
            set(axes3Ptr('get') , 'Position', [0 0 0.9500 1]);
            set(axes3fPtr('get'), 'Position', [0 0 0.9500 1]);
        end

%        set(axes3Ptr('get') , 'XLim', [(axes3.XLim(2)*0.15) inf]);
%        set(axes3fPtr('get'), 'XLim', [(axes3f.XLim(2)*0.15) inf]);          

   %     getColorMap('init');
        colormap(axes1fPtr('get'), getColorMap('one', fusionColorMapOffset('get')));
        colormap(axes2fPtr('get'), getColorMap('one', fusionColorMapOffset('get')));
        colormap(axes3fPtr('get'), getColorMap('one', fusionColorMapOffset('get')));  

        if isVsplash('get') == true && ...
           ~strcmpi(vSplahView('get'), 'all')
            if strcmpi(vSplahView('get'), 'coronal')
                ptrFusionColorbar = ...
                    colorbar(axes1fPtr('get'), ...
                             'AxisLocation' , 'in', ...
                             'Tag'          , 'Fusion Colorbar', ...
                             'EdgeColor'    , overlayColor('get'), ...
                             'Units'        , 'pixels', ...
                             'Box'          , 'off', ...
                             'Location'     , 'east', ...
                             'ButtonDownFcn', @colorbarCallback ...
                             );            
            elseif strcmpi(vSplahView('get'), 'sagittal')
                ptrFusionColorbar = ...
                    colorbar(axes2fPtr('get'), ...
                             'AxisLocation' , 'in', ...
                             'Tag'          , 'Fusion Colorbar', ...
                             'EdgeColor'    , overlayColor('get'), ...
                             'Units'        , 'pixels', ...
                             'Box'          , 'off', ...
                             'Location'     , 'east', ...
                             'ButtonDownFcn', @colorbarCallback ...
                             );            
            else
                ptrFusionColorbar = ...
                    colorbar(axes3fPtr('get'), ...
                             'AxisLocation' , 'in', ...
                             'Tag'          , 'Fusion Colorbar', ...
                             'EdgeColor'    , overlayColor('get'), ...
                             'Units'        , 'pixels', ...
                             'Box'          , 'off', ...
                             'Location'     , 'east', ...
                             'ButtonDownFcn', @colorbarCallback ...
                             );            
            end

        else
            ptrFusionColorbar = ...
                colorbar(axes3fPtr('get'), ...
                         'AxisLocation' , 'in', ...
                         'Tag'          , 'Fusion Colorbar', ...
                         'EdgeColor'    , overlayColor('get'), ...
                         'Units'        , 'pixels', ...
                         'Box'          , 'off', ...
                         'Location'     , 'east', ...
                         'ButtonDownFcn', @colorbarCallback ...
                         );            
        end
        uiFusionColorbarPtr('set', ptrFusionColorbar);
        aAxePosition = ptrFusionColorbar.Parent.Position;
        set(ptrFusionColorbar, 'Position', [aAxePosition(3)-49 29 40 ((aAxePosition(4))/2)-35-20]);

        if isFusion('get') == true
            set(ptrFusionColorbar, 'Visible', 'on');
        else   
            set(ptrFusionColorbar, 'Visible', 'off');
        end 

        colormap(axes1Ptr('get'), getColorMap('one', colorMapOffset('get')));
        colormap(axes2Ptr('get'), getColorMap('one', colorMapOffset('get')));
        colormap(axes3Ptr('get'), getColorMap('one', colorMapOffset('get'))); 


         if isVsplash('get') == true && ...
            ~strcmpi(vSplahView('get'), 'all')
            if strcmpi(vSplahView('get'), 'coronal')
                ptrColorbar = ...
                    colorbar(axes1Ptr('get'), ...
                             'AxisLocation' , 'in', ...
                             'Tag'          , 'Colorbar', ...
                             'EdgeColor'    , overlayColor('get'), ...
                             'Units'        , 'pixels', ...
                             'Box'          , 'off', ...
                             'Location'     , 'east', ...
                             'ButtonDownFcn', @colorbarCallback ...
                             );  
            elseif strcmpi(vSplahView('get'), 'sagittal')
                ptrColorbar = ...
                    colorbar(axes2Ptr('get'), ...
                             'AxisLocation' , 'in', ...
                             'Tag'          , 'Colorbar', ...
                             'EdgeColor'    , overlayColor('get'), ...
                             'Units'        , 'pixels', ...
                             'Box'          , 'off', ...
                             'Location'     , 'east', ...
                             'ButtonDownFcn', @colorbarCallback ...
                             );  
            else
                ptrColorbar = ...
                    colorbar(axes3Ptr('get'), ...
                             'AxisLocation' , 'in', ...
                             'Tag'          , 'Colorbar', ...
                             'EdgeColor'    , overlayColor('get'), ...
                             'Units'        , 'pixels', ...
                             'Box'          , 'off', ...
                             'Location'     , 'east', ...
                             'ButtonDownFcn', @colorbarCallback ...
                             );  
            end
         else
            ptrColorbar = ...
                colorbar(axes3Ptr('get'), ...
                         'AxisLocation' , 'in', ...
                         'Tag'          , 'Colorbar', ...
                         'EdgeColor'    , overlayColor('get'), ...
                         'Units'        , 'pixels', ...
                         'Box'          , 'off', ...
                         'Location'     , 'east', ...
                         'ButtonDownFcn', @colorbarCallback ...
                         );  
         end
         uiColorbarPtr('set', ptrColorbar);

         aAxePosition = ptrColorbar.Parent.Position;
         if isFusion('get') == true
            set(ptrColorbar, ...
                'Position', [aAxePosition(3)-49 ...
                             (aAxePosition(4)/2) ...
                             40 ...
                             (aAxePosition(4)/2)-4-20 ...
                             ] ...
                );
         else
            set(ptrColorbar, ...
                'Position', [aAxePosition(3)-49 ...
                             7 ...
                             40 ...
                             aAxePosition(4)-11-20 ...
                             ] ...
               );
         end

         if isFusion('get') == true
            uiAlphaSlider = uiAlphaSliderPtr('get');
            aAxePosition  = uiAlphaSlider.Parent.Position;                                                                
            if isVsplash('get') == true && ...
               ~strcmpi(vSplahView('get'), 'all')
           
                set(uiAlphaSlider, ...
                    'Position', [10 ...
                                 addOnWidth('get')+50 ...
                                 aAxePosition(3)-20 ...
                                 15 ...
                                 ] ...
                    );
            else
                set(uiAlphaSlider, ...
                    'Position', [aAxePosition(3)/2+10 ...
                                 addOnWidth('get')+50 ...
                                 aAxePosition(3)/2-20 ...
                                 15 ...
                                 ] ...
                    );
            end
         end      

         if isFusion('get') == true
            alpha(axes1Ptr('get'), 1-sliderAlphaValue('get'));
            alpha(axes2Ptr('get'), 1-sliderAlphaValue('get'));
            alpha(axes3Ptr('get'), 1-sliderAlphaValue('get'));
         end

         set(axes1Ptr('get'), 'CLim', [lMin lMax]);
         set(axes2Ptr('get'), 'CLim', [lMin lMax]);
         set(axes3Ptr('get'), 'CLim', [lMin lMax]); 

         if isFusion('get')
            lFusionMin = fusionWindowLevel('get', 'min');   
            lFusionMax = fusionWindowLevel('get', 'max'); 

            set(axes1fPtr('get'), 'CLim', [lFusionMin lFusionMax]);
            set(axes2fPtr('get'), 'CLim', [lFusionMin lFusionMax]);
            set(axes3fPtr('get'), 'CLim', [lFusionMin lFusionMax]);
         end


        %// add the listener to the "Colormap" property
%                h.lh = addlistener(axes3Ptr('get') , 'Colormap' , 'PostSet' , @colorbarCallback )

   %      col = colorbar(axes3Ptr('get'), 'EdgeColor', overlayColor('get'), 'Location', 'east');   


    end   

    if isFusion('get') == true
        sliderAlphaCallback();
    end

%            setWindowMinMax(lMax, lMin);
%           overlayText();
    if size(dicomBuffer('get'), 3) == 1
        uiLogo = displayLogo(uiOneWindowPtr('get'));
    else    
        if isVsplash('get') == true && ...                
           strcmpi(vSplahView('get'), 'coronal') 
       
            uiLogo = displayLogo(uiCorWindowPtr('get'));
        elseif isVsplash('get') == true && ...                
           strcmpi(vSplahView('get'), 'sagittal')                
       
            uiLogo = displayLogo(uiSagWindowPtr('get'));
        elseif isVsplash('get') == true && ...                
           strcmpi(vSplahView('get'), 'axial')
       
            uiLogo = displayLogo(uiTraWindowPtr('get'));
        elseif isVsplash('get') == true && ...                
           strcmpi(vSplahView('get'), 'all')  
       
            uiLogo = displayLogo(uiCorWindowPtr('get'));
        else
            uiLogo = displayLogo(uiCorWindowPtr('get'));
        end
    end

    logoObject('set', uiLogo);

    mouseFcn('set');

    initRoi();            
    initVoi();

    tRefreshRoi = roiTemplate('get');
    if ~isempty(tRefreshRoi) 
        for bb=1:numel(tRefreshRoi)
           if isvalid(tRefreshRoi{bb}.Object) 
               if (strcmpi(tRefreshRoi{bb}.Axe, 'Axes1') && ...
                    iCoronal == tRefreshRoi{bb}.SliceNb) || ...
                   (strcmpi(tRefreshRoi{bb}.Axe, 'Axes2')&& ...
                    iSagittal == tRefreshRoi{bb}.SliceNb)|| ...
                   (strcmpi(tRefreshRoi{bb}.Axe, 'Axes3') && ...
                    iAxial == tRefreshRoi{bb}.SliceNb)

                    if isVsplash('get') == true
                        tRefreshRoi{bb}.Object.Visible = 'off';
                    else
                        tRefreshRoi{bb}.Object.Visible = 'on';
                    end
                else
                    tRefreshRoi{bb}.Object.Visible = 'off';
                end    
           end
        end
    end  

    set(uiSliderWindowPtr('get'), 'Visible', 'on');
    set(uiSliderLevelPtr('get') , 'Visible', 'on');

    if isFusion('get') == true
        set(uiFusionSliderWindowPtr('get'), 'Visible', 'on');
        set(uiFusionSliderLevelPtr('get') , 'Visible', 'on');
        set(uiAlphaSliderPtr('get'), 'Visible', 'on');                
    else
        set(uiFusionSliderWindowPtr('get'), 'Visible', 'off');
        set(uiFusionSliderLevelPtr('get') , 'Visible', 'off');
        set(uiAlphaSliderPtr('get'), 'Visible', 'off');
    end

    if size(im, 3) == 1
        set(uiOneWindowPtr('get'), 'Visible', 'on');
    else

        if isVsplash('get') == true && ... 
           ~strcmpi(vSplahView('get'), 'all')
            if strcmpi(vSplahView('get'), 'coronal')
                
                set(uiCorWindowPtr('get'), 'Visible', 'on' );
                set(uiSagWindowPtr('get'), 'Visible', 'off');
                set(uiTraWindowPtr('get'), 'Visible', 'off');

                set(uiSliderCorPtr('get'), 'Visible', 'on' );
                set(uiSliderSagPtr('get'), 'Visible', 'off');
                set(uiSliderTraPtr('get'), 'Visible', 'off');                        
            elseif strcmpi(vSplahView('get'), 'sagittal')
                
                set(uiCorWindowPtr('get'), 'Visible', 'off');
                set(uiSagWindowPtr('get'), 'Visible', 'on' );
                set(uiTraWindowPtr('get'), 'Visible', 'off');

                set(uiSliderCorPtr('get'), 'Visible', 'off');
                set(uiSliderSagPtr('get'), 'Visible', 'on' );
                set(uiSliderTraPtr('get'), 'Visible', 'off');                         
            else
                
                set(uiCorWindowPtr('get'), 'Visible', 'off');
                set(uiSagWindowPtr('get'), 'Visible', 'off');
                set(uiTraWindowPtr('get'), 'Visible', 'on' );

                set(uiSliderCorPtr('get'), 'Visible', 'off');
                set(uiSliderSagPtr('get'), 'Visible', 'off');
                set(uiSliderTraPtr('get'), 'Visible', 'on' ); 
            end

        else    
            
            set(uiCorWindowPtr('get'), 'Visible', 'on');
            set(uiSagWindowPtr('get'), 'Visible', 'on');
            set(uiTraWindowPtr('get'), 'Visible', 'on');

            set(uiSliderCorPtr('get'), 'Visible', 'on');
            set(uiSliderSagPtr('get'), 'Visible', 'on');
            set(uiSliderTraPtr('get'), 'Visible', 'on');                    
        end
    end

    if bInitSegPanel == true
       setViewSegPanel();
    end

    if bInitKernelPanel == true
       setViewKernelPanel();
    end  
end     
