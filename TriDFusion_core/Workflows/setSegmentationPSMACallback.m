function setSegmentationPSMACallback(hObject, ~)
%function setSegmentationPSMACallback(hObject)
%Run PSMA Tumor Segmentation, The tool is called from the main menu.
%See TriDFuison.doc (or pdf) for more information about options.
%
%Author: Daniel Lafontaine, lafontad@mskcc.org
%
%Last specifications modified:
%
% Copyright 2023, Daniel Lafontaine, on behalf of the TriDFusion development team.
%
% This file is part of The Triple Dimention Fusion (TriDFusion).
%
% TriDFusion development has been led by:  Daniel Lafontaine
%
% TriDFusion is distributed under the terms of the Lesser GNU Public License.
%
%     This version of TriDFusion is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
% TriDFusion is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
% without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with TriDFusion.  If not, see <http://www.gnu.org/licenses/>.

    if exist('hObject', 'var')

        DLG_PSMA_PERCENT_X = 380;
        DLG_PSMA_PERCENT_Y = 160;
    
        dlgPSMASegmentation = ...
            dialog('Position', [(getMainWindowPosition('xpos')+(getMainWindowSize('xsize')/2)-DLG_PSMA_PERCENT_X/2) ...
                                (getMainWindowPosition('ypos')+(getMainWindowSize('ysize')/2)-DLG_PSMA_PERCENT_Y/2) ...
                                DLG_PSMA_PERCENT_X ...
                                DLG_PSMA_PERCENT_Y ...
                                ],...
                   'MenuBar', 'none',...
                   'Resize', 'off', ...    
                   'NumberTitle','off',...
                   'MenuBar', 'none',...
                   'Color', viewerBackgroundColor('get'), ...
                   'Name', 'PSMA - 18F-FDCFPyL Segmentation',...
                   'Toolbar','none'...               
                   );
    
    %     % Boundary percent of max
    % 
    %         uicontrol(dlgPSMASegmentation,...
    %                   'style'   , 'text',...
    %                   'Enable'  , 'On',...
    %                   'string'  , 'Boundary percent of max',...
    %                   'horizontalalignment', 'left',...
    %                   'BackgroundColor', viewerBackgroundColor('get'), ...
    %                   'ForegroundColor', viewerForegroundColor('get'), ...                   
    %                   'position', [20 162 250 20]...
    %                   );
    % 
    %     edtPSMABoundaryPercentOfMaxValue = ...
    %         uicontrol(dlgPSMASegmentation, ...
    %                   'Style'   , 'Edit', ...
    %                   'Position', [285 165 75 20], ...
    %                   'String'  , num2str(PSMASegmentationBoundaryPercentValue('get')), ...
    %                   'Enable'  , 'on', ...
    %                   'BackgroundColor', viewerBackgroundColor('get'), ...
    %                   'ForegroundColor', viewerForegroundColor('get'), ...
    %                   'CallBack', @edtPSMABoundaryPercentOfMaxValueCallback ...
    %                   ); 
    
        % Bone mask threshold
    
            uicontrol(dlgPSMASegmentation,...
                      'style'   , 'text',...
                      'Enable'  , 'On',...
                      'string'  , 'Bone mask threshold (HU)',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...                   
                      'position', [20 112 250 20]...
                      );
    
        edtPSMABoneMaskThresholdValue = ...
            uicontrol(dlgPSMASegmentation, ...
                      'Style'   , 'Edit', ...
                      'Position', [285 115 75 20], ...
                      'String'  , num2str(PSMASegmentationBoneMaskThresholdValue('get')), ...
                      'Enable'  , 'on', ...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'CallBack', @edtPSMABoneMaskThresholdValueCallback ...
                      ); 
    
         % Smallest Contour (ml)
    
            uicontrol(dlgPSMASegmentation,...
                      'style'   , 'text',...
                      'Enable'  , 'On',...
                      'string'  , 'Smallest Contour (ml)',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...                   
                      'position', [20 87 250 20]...
                      );
    
        edtPSMASmalestVoiValue = ...
            uicontrol(dlgPSMASegmentation, ...
                      'Style'   , 'Edit', ...
                      'Position', [285 90 75 20], ...
                      'String'  , num2str(PSMASmalestVoiValue('get')), ...
                      'Enable'  , 'on', ...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'CallBack', @edtPSMASmalestVoiValueCallback ...
                      );        
    
        % Pixel Edge
    
            uicontrol(dlgPSMASegmentation,...
                      'style'   , 'text',...
                      'Enable'  , 'Inactive',...
                      'string'  , 'Pixel Edge',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...                   
                      'ButtonDownFcn'  , @chkPSMAPixelEdgeCallback, ...
                      'position', [40 62 150 20]...
                      );
    
        chkPSMAPixelEdge = ...
            uicontrol(dlgPSMASegmentation,...
                      'style'   , 'checkbox',...
                      'enable'  , 'on',...
                      'value'   , pixelEdge('get'),...
                      'position', [20 65 20 20],...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...                   
                      'Callback', @chkPSMAPixelEdgeCallback...
                      );
    
         % Cancel or Proceed
    
         uicontrol(dlgPSMASegmentation,...
                   'String','Cancel',...
                   'Position',[285 7 75 25],...
                   'BackgroundColor', viewerBackgroundColor('get'), ...
                   'ForegroundColor', viewerForegroundColor('get'), ...                
                   'Callback', @cancelPSMASegmentationCallback...
                   );
    
         uicontrol(dlgPSMASegmentation,...
                  'String','Continue',...
                  'Position',[200 7 75 25],...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...               
                  'Callback', @proceedPSMASegmentationCallback...
                  );    
    else
        setSegmentationPSMA(PSMASegmentationBoneMaskThresholdValue('get'), ...
                            PSMASmalestVoiValue('get'), ...
                            pixelEdge('get'), ...
                            true); 

    end

    function edtPSMASmalestVoiValueCallback(~, ~)

        dObjectValue = str2double(get(edtPSMASmalestVoiValue, 'String'));

        if dObjectValue < 0

            dObjectValue = 0;

            set(edtPSMASmalestVoiValue, 'String', num2str(dObjectValue));
        end

        PSMASmalestVoiValue('set', dObjectValue);

    end

    function chkPSMAPixelEdgeCallback(hObject, ~)  
                
        bObjectValue = get(chkPSMAPixelEdge, 'Value');
        
        if strcmpi(get(hObject, 'Style'), 'text')
            
            set(chkPSMAPixelEdge, 'Value', ~bObjectValue);
        end        
        
        bObjectValue = get(chkPSMAPixelEdge, 'Value');

        pixelEdge('set', bObjectValue);
        
        % Set contour panel checkbox
        set(chkPixelEdgePtr('get'), 'Value', pixelEdge('get'));
    end

%     function edtPSMABoundaryPercentOfMaxValueCallback(~, ~)     
% 
%         dBoundaryPercent = str2double(get(edtPSMABoundaryPercentOfMaxValue, 'String'));
% 
%         if dBoundaryPercent <= 0
% 
%             dBoundaryPercent = 10;
%             set(edtPSMABoundaryPercentOfMaxValue, 'String', num2str(dBoundaryPercent));
% 
%         elseif dBoundaryPercent >= 100
%             
%             dBoundaryPercent = 10;
%             set(edtPSMABoundaryPercentOfMaxValue, 'String', num2str(dBoundaryPercent));           
%         end
% 
%         PSMASegmentationBoundaryPercentValue('set', dBoundaryPercent);
% 
%     end

    function edtPSMABoneMaskThresholdValueCallback(~, ~)     

        dBoneMaskThreshold = str2double(get(edtPSMABoneMaskThresholdValue, 'String'));

        if dBoneMaskThreshold <= 0

            dBoneMaskThreshold = 100;
            set(edtPSMABoneMaskThresholdValue, 'String', num2str(dBoneMaskThreshold));        
        end

        PSMASegmentationBoneMaskThresholdValue('set', dBoneMaskThreshold);

    end

    function cancelPSMASegmentationCallback(~, ~)   

        delete(dlgPSMASegmentation);
    end
    
    function proceedPSMASegmentationCallback(~, ~)

        dSmalestVoiValue   = str2double(get(edtPSMASmalestVoiValue, 'String'));
        dPixelEdge         = get(chkPSMAPixelEdge, 'value');
%         dBoundaryPercent   = str2double(get(edtPSMABoundaryPercentOfMaxValue, 'String'))/100;
        dBoneMaskThreshold = str2double(get(edtPSMABoneMaskThresholdValue, 'String'));

        delete(dlgPSMASegmentation);

        setSegmentationPSMA(dBoneMaskThreshold, dSmalestVoiValue, dPixelEdge, false); 
    end

end