function resize = dicomViewer()
%function resize = dicomViewer()
%Dicom Viewer Main Function.
%See TriDFuison.doc (or pdf) for more information about options.
%
%Author: Daniel Lafontaine, lafontad@mskcc.org
%
%Last specifications modified:
%
% Copyright 2020, Daniel Lafontaine, on behalf of the TriDFusion development team.
%
% This file is part of The Triple Dimention Fusion (TriDFusion).
%
% TriDFusion development has been led by:  Daniel Lafontaine
%
% TriDFusion is distributed under the terms of the Lesser GNU Public License.
%
%     This version of TriDFusion is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
% TriDFusion is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
% without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with TriDFusion.  If not, see <http://www.gnu.org/licenses/>.

    resize = @resizeFigure;
    
    aspectRatio     ('set', true);
    isShading       ('set', false);
    gateUseSeriesUID('set', true);
    gateLookupTable ('set', true);
    gateLookupType  ('set', 'Relative');
    vSplahView      ('set', 'Axial');

%    imageOrientation('set', 'axial');
    
    suvWindowLevel('set', 'max', 7);
    suvWindowLevel('set', 'min', 0);

    fusionWindowLevel('set', 'max', 0);
    fusionWindowLevel('set', 'min', 0);
% 
%     fusionSliderLevel('set', 'max', 0);
%     fusionSliderLevel('set', 'min', 0);

    link2DMip('set', true);

    windowLevel('set', 'max', 0);
    windowLevel('set', 'min', 0);
    
    colorbarScale      ('set', 100);
    fusionColorbarScale('set', 100); 

    kernelCtSerieOffset        ('set', 1);
    kernelUseCtDoseMap         ('set', false);
    kernelUnitTypeWindow       ('set', false);
    kernelSegTreshValue        ('set', 'lower', 0);
    kernelSegTreshValue        ('set', 'upper', 1);    
    kernelMethod               ('set', 1); % Local Deposition
    kernelInterpolation        ('set', 'Linear');    
    kernelCutoff               ('set', 99.9305); % mm
    kernelMicrosphereInSpecimen('set', false);
    
    resizePixelSizeDoseInformationDialog('set', false);
    
    resizeVoxelDoseInformationDialog('set', 'x', 0.1); % mm
    resizeVoxelDoseInformationDialog('set', 'y', 0.1); % mm
    resizeVoxelDoseInformationDialog('set', 'z', 0.1); % mm
    
    isSameSpacingDoseInformationDialog('set', true);
    
    treatmentTypeDoseInformationDialog('set', 1); % TheraSphere    
    
    microspereVolumeDoseInformationDialog('set', 8.1E-9); % In cm3
    specimenVolumeDoseInformationDialog  ('set', 0   ); % In ml
    
    imageSegTreshValue('set', 'lower', 0);
    imageSegTreshValue('set', 'upper', 1);
    lungSegTreshValue ('set', 0.2       );
    lungSegRadiusValue('set', 3         );

    edgeSegMethod      ('set', 'canny');
    fudgeFactorSegValue('set', 0.95   );
    
    invertConstraint('set', false);

    minTresholdRoiPanelValue('set', true, '', 0);
    maxTresholdRoiPanelValue('set', true, '', 0);

    minTresholdSliderRoiPanelValue('set', 0   );
    maxTresholdSliderRoiPanelValue('set', 0.41);

    roiFaceAlphaValue('set', 0.7);
    
    crossSize              ('set', 10     );
    crossColor             ('set', viewerCrossLinesColor('get'));
    crossActivate          ('set',  true  );
    overlayActivate        ('set',  true  );
    overlayColor           ('set', 'black');
    windowButton           ('set', 'up'   );
    invertColor            ('set', true   );
    backgroundColor        ('set', viewerAxesColor('get') );
    background3DOffset     ('set', 7 ); % white
    colorMapOffset         ('set', 10);
    fusionColorMapOffset   ('set', 20); % Hot Metal
    volLinearAlphaValue    ('set', 1 );
    volLinearFusionAlphaValue('set', 1);
    getVolAlphaMap         ('set', '', 'auto');
    getVolFusionAlphaMap   ('set', '', 'auto');
    colorMapVolOffset      ('set', 21); % angio
    colorMapVolFusionOffset('set', 21); % angio
    colorMapMipOffset      ('set', 10); % gray
    colorMapMipFusionOffset('set', 10); % gray
    mipLinearAlphaValue    ('set', 1 );
    mipLinearFuisonAlphaValue('set', 1);
    getMipAlphaMap         ('set', '', 'auto');
    getMipFusionAlphaMap   ('set', '', 'auto');
    mipFusionBufferOffset  ('set', 1);

    isoColorOffset        ('set', 4  ); % red
    isoSurfaceValue       ('set', 0.1); 
    isoColorFusionOffset  ('set', 4  ); % red
    isoSurfaceFusionValue ('set', 0.1);    
    addVoiIsoMask         ('set', true);
    percentOfPeakIsoMask  ('set', true); % In percent or SUV  
    multiplePeaksIsoMask  ('set', false);
    peakSUVMaxIsoMask     ('set', 4);  % In SUV
    peakPercentIsoMask    ('set', 65); % In percent
    voiIsoMaskMax         ('set', 41); % In percent
    smalestIsoMask        ('set', 0.3); % In ml
    valueFormulaIsoMask   ('set', 1); %Fixed suv value
    resampleToCTIsoMask   ('set', true);
    resampledContoursIsoMask('set', true);
    isoMaskCtSerieOffset  ('set', 1);

    volLighting           ('set', true);
    volFusionLighting     ('set', true);

    background3DGradient  ('set', true);

    volume3DZOffset  ('set', false);

    %       surfaceAlpha    ('set', 1       );
    sliderWindowLevelValue      ('set', 'max', 0.5);
    sliderWindowLevelValue      ('set', 'min', 0.5);
    sliderFusionWindowLevelValue('set', 'max', 0.5);
    sliderFusionWindowLevelValue('set', 'min', 0.5);
    sliderAlphaValue            ('set', 0.5);

    vSplashLayout('set', 'x', 5);
    vSplashLayout('set', 'y', 3);

    addOnWidth       ('set', 0    );
    zoomTool         ('set', false);
    rotate3DTool     ('set', false);
    dataCursorTool   ('set', false);
    panTool          ('set', false);
    editPlot         ('set', false);
    editToolbar      ('set', false);
    camToolbar       ('set', false);
    playback3DToolbar('set', false);
    roiToolbar       ('set', false);

    playback2DMipOnly('set', true);

    multiFrameSpeed   ('set', 0.15 );
    multiFramePlayback('set', false);
    multiFrameRecord  ('set', false);
    multiFrameZoom    ('set', 'in' , 1);
    multiFrameZoom    ('set', 'out', 1);
    multiFrameZoom    ('set', 'axe', []);

    multiFrame3DSpeed   ('set', 0.05 );
    multiFrame3DIndex   ('set', 1    );
    multiFrame3DPlayback('set', false);
    multiFrame3DRecord  ('set', false);
    multiFrame3DZoom    ('set', 0    );
    
    export3DSliceThickess('set', 1);

    voi3DEnableList             ('set', '');
    voi3DTransparencyList       ('set', '');
    voi3DRenderer               ('set', 'VolumeRendering');
    slider3DVoiTransparencyValue('set', 0.50);
    voi3DSmooth                 ('set', true);
    
    gaussFilter('set', false);
    
    gaussFilterValue('set', 'x', 0.1);
    gaussFilterValue('set', 'y', 0.1);
    gaussFilterValue('set', 'z', 1  );

    displayVoi('set', false);

    displayVolColorMap('set', false);
    displayMIPColorMap('set', false);

    switchTo3DMode    ('set', false);
    switchToIsoSurface('set', false);
    switchToMIPMode   ('set', false);

    initWindowLevel      ('set', true);
    initFusionWindowLevel('set', true);
    
    getRGBColormapImage('set', 'rgb-plus.png');

    isfigVoiSimplified           ('set', false); 
    isfigVoiExpendVoi            ('set', false);
    suvMenuUnitOption            ('set', true);
    segMenuOption                ('set', false);
    modifiedMatrixValueMenuOption('set', false);
    isFigRoiInColor              ('set', true);
    centroidMenuOption           ('set', false);

    registrationTemplate('init');
    registrationReport  ('set', '');

    updateDescription            ('set', true);
    referenceOutputView          ('set', true);
    associateRegistrationModality('set', true);

    roiPanelCtSerieOffset     ('set', 1);
    roiPanelUseCt             ('set', false);
    roiPanelUnitTypeWindow    ('set', false);
    smalestRegionRoiPanelValue('set', 3);
    multipleObjectsRoiPanel   ('set', true);
    pixelEdge                 ('set', true);
    holesRoiPanel             ('set', false);

    voiIncrementRatio('set', 5);

    % Machine Learning

    fastMachineLearningDialog      ('set', true);
    forceSplitMachineLearningDialog('set', true);
    bodySegMachineLearningDialog   ('set', true);

    viewFarthestDistances('set', false);
    
    isShowTextContours('set', 'axe'     , true );
    isShowTextContours('set', 'coronal' , false);
    isShowTextContours('set', 'sagittal', false);
    isShowTextContours('set', 'axial'   , true );
    isShowTextContours('set', 'mip'     , false);
   
    isShowFaceAlphaContours('set', true);
    plotContoursLineWidth('set', 1);

    updateDicomWriteSeriesInstanceUID('set', true);
    modifiedImagesContourMatrix('set', false);
       
    sphereDefaultDiameter ('set', 50); % in mm
    brush2dDefaultDiameter('set', 30); % in mm  
    clickVoiPreSegmentationValue('set', 10); % In Perent

    mipAngle('set', 1);

    rng('shuffle');
    
    % Set ISOsurface default value. Those value will be use in
    % setIsoSurfaceCallback(~, ~). The default value are restored in
    % setSeriesCallback() and setSourceCallback().
    
    defaultIsoColorOffset       ('set', isoColorOffset('get')       ); 
    defaultIsoSurfaceValue      ('set', isoSurfaceValue('get')      ); 
    defaultIsoColorFusionOffset ('set', isoColorFusionOffset('get') ); 
    defaultIsoSurfaceFusionValue('set', isoSurfaceFusionValue('get'));

    % Radiomics
    radiomicsEntireVolume('set', true);
    radiomicsContourType('set', true);

    % 3D Lung Shunt

    lungShuntLiverVolumeOversized          ('set',  3); % Pixel(s) offset
    lungShuntLiverTopOfVolumeExtraSlices   ('set',  1); % Slice cutoff
    lungShuntLiverBottomOfVolumeExtraSlices('set',  2); % Slice cutoff
    lungShuntLungsVolumeOversized          ('set',  1); % Pixel(s) offset 
    lungShuntLungsVolumeOverlap            ('set', false); % Lungs liver overlap

    % 3D Lung Lobes

    lungLobesLiverVolumeOversized       ('set', 2); % Pixel(s) offset
    lungLobesLiverTopOfVolumeExtraSlices('set', 1); % Slice cutoff 

    % FDG segmentation

    FDGSmoothMaskValue('set', false);

    FDGSegmentationSUVThresholdValue     ('set', 4); % SUV
    FDGSegmentationBoneSUVThresholdValue ('set', 4); % SUV
    FDGSegmentationPercentOfPeakValue    ('set', 41); % Percent
    FDGSegmentationMultiplePeaksValue    ('set', 65); % Percent
    FDGSegmentationBoneMaskThresholdValue('set', 200); % HU
    FDGSegmentationBoundaryPercentValue  ('set', 10);
    FDGSmalestVoiValue('set', 0.3);

    excludeLymphNodeSUVBrain         ('set', true);
    excludeLymphNodeSUVUrinaryBladder('set', true);
    excludeLymphNodeSUVKidneyLeft    ('set', false);
    excludeLymphNodeSUVKidneyRight   ('set', false);
    excludeLymphNodeSUVSmallBowel    ('set', false);
    segmentLymphNodeSUVSpleen        ('set', true);

    % Breast Cancer

    breastCancerSmalestVoiValue('set', 0.3);
    breastCancerSegmentationBoneMaskThresholdValue('set', 200);
    breastCancerSegmentationSUVThresholdValue('set', 4);
    breastCancerSegmentationBoneSUVThresholdValue('set', 3);

    % Brown fat

    FDGBrownFatSUVType                 ('set', 'LBM'); 
    FDGBrownFatSUVThresholdValue       ('set', 1.8); % SUV
    FDGBrownFatHUThresholdValue        ('set', -500, 500); % HU
    FDGBrownFatSmalestVoiValue         ('set', 0.1);

    excludeBrownFatSUVBrain            ('set', true);
    excludeBrownFatSUVHeart            ('set', true);
    excludeBrownFatSUVLungs            ('set', true);
    excludeBrownFatSUVKidneyLeft       ('set', true);
    excludeBrownFatSUVKidneyRight      ('set', true);
    excludeBrownFatSUVLiver            ('set', true);
    excludeGa68DOTATATETrachea         ('set', true);
    excludeBrownFatSUVAdrenalGlandLeft ('set', true);
    excludeBrownFatSUVAdrenalGlandRight('set', true);
    excludeBrownFatSUVSpleen           ('set', true);
    excludeBrownFatSUVGallbladder      ('set', true);
    excludeBrownFatSUVPancreas         ('set', true);

    excludeBrownFatSUVEsophagus        ('set', true);
    excludeBrownFatSUVStomach          ('set', true);
    excludeBrownFatSUVDuodenum         ('set', true);
    excludeBrownFatSUVSmallBowel       ('set', true);
    excludeBrownFatSUVColon            ('set', true);

    excludeBrownFatSUVSkeleton         ('set', true);

    machineLearningFDGBrownFatSUVScaled('set', true);
    machineLearningFDGBrownFatSUVNormalization('set', false);
    machineLearningFDGBrownFatSmoothMask('set', true);
    machineLearningFDGBrownFatClassifySegmentation('set', true);
    machineLearningFDGBrownFatCELoss('set', true);
    machineLearningFDGBrownFatSmallestVoiValue('set', 0);

    % FDHT segmentation

    FDHTSegmentationBoneMaskThresholdValue('set', 100); % HU
%     FDHTSegmentationBoundaryPercentValue('set', 10);
    FDHTNormalLiverSDValue('set', 0.4);
    FDHTNormalLiverMeanValue('set', 4);
    FDHTSmalestVoiValue('set', 0.3);

    excludeFDHTBrain('set', true);
    excludeFDHTUrinaryBladder('set', true);
    excludeFDHTKidneyLeft('set', true);
    excludeFDHTKidneyRight('set', true);
    excludeFDHTSmallBowel('set', true);
    excludeFDHTSpleen('set', true);

    % Lu177 segmentation

    Lu177SegmentationBoneMaskThresholdValue('set', 150); % HU
%     Lu177SegmentationBoundaryPercentValue('set', 20);
    Lu177NormalLiverSDValue('set', 0.4);
    Lu177NormalLiverMeanValue('set', 4);
    Lu177SmalestVoiValue('set', 0.3);

    excludeLu177Brain         ('set', true);
    excludeLu177UrinaryBladder('set', true);
    excludeLu177KidneyLeft    ('set', true);
    excludeLu177KidneyRight   ('set', true);
    excludeLu177SmallBowel    ('set', false);
    excludeLu177Spleen        ('set', true);

    % PSMA Lu177 Segmentation

    machineLearningPSMALu177CELoss('set', true);
    machineLearningPSMALu177ClassifySegmentation('set', true);
    machineLearningPSMALu177SmoothMask('set', false);
    machineLearningPSMALu177SmallestVoiValue('set', 0);

    % PSMA segmentation

    PSMASegmentationBoneMaskThresholdValue('set', 150); % HU
%     PSMASegmentationBoundaryPercentValue('set', 10);
    PSMANormalLiverSDValue  ('set', 0.4);
    PSMANormalLiverMeanValue('set', 4);
    PSMASmalestVoiValue     ('set', 0.3);

    excludePSMABrain         ('set', true);
    excludePSMAUrinaryBladder('set', true);
    excludePSMAKidneyLeft    ('set', true);
    excludePSMAKidneyRight   ('set', true);
    excludePSMASmallBowel    ('set', true);
    excludePSMASpleen        ('set', true);

    % PSMA Ga68 Segmentation

    machineLearningPSMAGa68CELoss('set', true);
    machineLearningPSMAGa68ClassifySegmentation('set', true);
    machineLearningPSMAGa68SmoothMask('set', true);
    machineLearningPSMAGa68SmallestVoiValue('set', 0);

    % Ga68DOTATATE segmentation

    Ga68DOTATATESegmentationBoneMaskThresholdValue('set', 200); % HU
%     Ga68DOTATATESegmentationBoundaryPercentValue('set', 10);
    Ga68DOTATATENormalLiverSDValue  ('set', 0.4);
    Ga68DOTATATENormalLiverMeanValue('set', 4);
    Ga68DOTATATESmalestVoiValue     ('set', 0.3);


    % Machine Learning Ga68 DOTATATE segmentation Other Organ
    % Exclusion

    excludeGa68DOTATATEBrain            ('set', true );
    excludeGa68DOTATATETrachea          ('set', true );
    excludeGa68DOTATATEAdrenalGlandLeft ('set', true );
    excludeGa68DOTATATEAdrenalGlandRight('set', true );
    excludeGa68DOTATATEGallbladder      ('set', true );
    excludeGa68DOTATATEPancreas         ('set', false);
    excludeGa68DOTATATEKidneyLeft       ('set', true );
    excludeGa68DOTATATEKidneyRight      ('set', true );
    excludeGa68DOTATATESpleen           ('set', true );

    % Machine Learning Ga68 DOTATATE segmentation Gastrointestinal Tract
    % Exclusion

    excludeGa68DOTATATEUrinaryBladder('set', true );
    excludeGa68DOTATATEColon         ('set', false);
    excludeGa68DOTATATESmallBowel    ('set', false);
    excludeGa68DOTATATEDuodenum      ('set', false);
    excludeGa68DOTATATEStomach       ('set', false);
    excludeGa68DOTATATEEsophagus     ('set', false);

    % Machine Learning Ga68 DOTATATE Options

    Ga68DOTATATESmalestVoiValue('set', 0.3);

    Ga68DOTATATENormalLiverTresholdMultiplierValue('set', 1.5);


    % Machine Learning Full AI Ga68 DOTATATE Options

    Ga68DOTATATEFullAITrainedModel          ('set', 1);
    Ga68DOTATATEFullAISmalestVoiValue       ('set', 0);
    Ga68DOTATATEFullAILesionClassification  ('set', true);
    Ga68DOTATATEFullAISmoothMask            ('set', true);
    Ga68DOTATATEFullAIEnhancedBoneMaskLesion('set', false);

    % Voxel Dosimetry

    voxelDosimetryRadionuclide('set', 'Y-90');

    voxelDosimetryAlphaPhysicalModel                ('set', 3); % Monte Carlo
    voxelDosimetryBetaPhysicalModel                 ('set', 3); % Monte Carlo
    voxelDosimetryGammaPhysicalModel                ('set', 3); % Monte Carlo
    voxelDosimetryMonoenergeticElectronPhysicalModel('set', 3); % Monte Carlo
    voxelDosimetryPositronPhysicalModel             ('set', 3); % Monte Carlo
    voxelDosimetryXrayPhysicalModel                 ('set', 3); % Monte Carlo

    voxelDosimetryAlphaSourceParticles                ('set', 500000);
    voxelDosimetryBetaSourceParticles                 ('set', 500000);
    voxelDosimetryGammaSourceParticles                ('set', 500000);
    voxelDosimetryMonoenergeticElectronSourceParticles('set', 500000);
    voxelDosimetryPositronSourceParticles             ('set', 500000);
    voxelDosimetryXraySourceParticles                 ('set', 500000);

    voxelDosimetryAlphaSourceParticlesBatches                ('set', 10);
    voxelDosimetryBetaSourceParticlesBatches                 ('set', 10);
    voxelDosimetryGammaSourceParticlesBatches                ('set', 10);
    voxelDosimetryMonoenergeticElectronSourceParticlesBatches('set', 10);
    voxelDosimetryPositronSourceParticlesBatches             ('set', 10);
    voxelDosimetryXraySourceParticlesBatches                 ('set', 10);

    voxelDosimetryAlphaCutoff                ('set', 10); % In mm
    voxelDosimetryBetaCutoff                 ('set', 10); % In mm
    voxelDosimetryGammaCutoff                ('set', 10); % In mm
    voxelDosimetryMonoenergeticElectronCutoff('set', 10); % In mm
    voxelDosimetryPositronCutoff             ('set', 10); % In mm
    voxelDosimetryXrayCutoff                 ('set', 10); % In mm

    voxelDosimetryMachineLearningTissueDependant('set', true);
    voxelDosimetryTissueDependantBackground('set', 1); % Water
    voxelDosimetryPHITSDebugWindow('set', true); 
    voxelDosimetryAllContours('set', false); 

    clearDisplay();

    uiTopWindow = ...
        uipanel(fiMainWindowPtr('get'),...
                'Units'   , 'pixels',...
                'position', [0 ...
                             getMainWindowSize('ysize')-40 ...
                             getMainWindowSize('xsize') ...
                             39 ...
                             ],...
                'AutoResizeChildren', 'off', ...
                'BackgroundColor', viewerBackgroundColor ('get'), ...
                'ForegroundColor', viewerForegroundColor('get') ...
               );
     uiTopWindowPtr('set', uiTopWindow);

    % Segmentation Panel

     uiSegMainPanel = ...
        uipanel(fiMainWindowPtr('get'),...
                'Units'   , 'pixels',...
                'position', [0 ...
                             addOnWidth('get')+30 ...
                            300 ...
                            getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30 ...
                            ],...
                'AutoResizeChildren', 'off', ...
                'Visible', 'off',...
                'BackgroundColor', viewerBackgroundColor ('get'), ...
                'ForegroundColor', viewerForegroundColor('get') ...
                );
     uiSegMainPanelPtr('set', uiSegMainPanel);

     uiSegPanel = ...
         uipanel(uiSegMainPanelPtr('get'),...
                 'Units'   , 'pixels',...
                 'position', [0 ...
                              0 ...
                              280 ...
                              2000 ...
                              ],...
                'AutoResizeChildren', 'off', ...
                'Visible', 'off', ...
                'BackgroundColor', viewerBackgroundColor ('get'), ...
                'ForegroundColor', viewerForegroundColor('get') ...
                );
    uiSegPanelPtr('set', uiSegPanel);

    aSegMainPanelPosition = get(uiSegMainPanelPtr('get'), 'position');
    uiSegPanelSlider = ...
        uicontrol('Style'   , 'Slider', ...
                  'Parent'  , uiSegMainPanelPtr('get'),...
                  'Units'   , 'pixels',...
                  'position', [280 ...
                               0 ...
                               20 ...
                               aSegMainPanelPosition(4) ...
                               ],...
                  'Value', 0, ...
                  'Callback',@uiSegPanelSliderCallback, ...
                  'BackgroundColor', viewerBackgroundColor ('get'), ...
                  'ForegroundColor', viewerForegroundColor('get') ...
                  );
    uiSegPanelSliderPtr('set', uiSegPanelSlider);
    % addlistener(uiSegPanelSlider, 'Value', 'PreSet', @uiSegPanelSliderCallback);
    addlistener(uiSegPanelSlider, 'ContinuousValueChange', @uiSegPanelSliderCallback);

    initSegPanel();

    % Kernel Panel

    uiKernelMainPanel = ...
        uipanel(fiMainWindowPtr('get'),...
                'Units'   , 'pixels',...
                'position', [0 ...
                             addOnWidth('get')+30 ...
                             300 ...
                             getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30 ...
                             ],...
                'AutoResizeChildren', 'off', ...
                'Visible', 'off',...
                'BackgroundColor', viewerBackgroundColor ('get'), ...
                'ForegroundColor', viewerForegroundColor('get') ...
                );
    uiKernelMainPanelPtr('set', uiKernelMainPanel);

    uiKernelPanel = ...
        uipanel(uiKernelMainPanelPtr('get'),...
                'Units'   , 'pixels',...
                'position', [0 ...
                             0 ...
                             280 ...
                             2000 ...
                             ],...
                'AutoResizeChildren', 'off', ...
                'Visible', 'off', ...
                'BackgroundColor', viewerBackgroundColor ('get'), ...
                'ForegroundColor', viewerForegroundColor('get') ...
                );
    uiKernelPanelPtr('set', uiKernelPanel);

    aKernelMainPanelPosition = get(uiKernelMainPanelPtr('get'), 'position');
    uiKernelPanelSlider = ...
        uicontrol('Style'   , 'Slider', ...
                  'Parent'  , uiKernelMainPanelPtr('get'),...
                  'Units'   , 'pixels',...
                  'position', [280 ...
                               0 ...
                               20 ...
                               aKernelMainPanelPosition(4) ...
                               ],...
                  'Value'   , 0, ...
                  'Callback',@uiKernelPanelSliderCallback, ...
                  'BackgroundColor', viewerBackgroundColor ('get'), ...
                  'ForegroundColor', viewerForegroundColor('get') ...
                  );
    uiKernelPanelSliderPtr('set', uiKernelPanelSlider);
    % addlistener(uiKernelPanelSlider, 'Value', 'PreSet', @uiKernelPanelSliderCallback);
    addlistener(uiKernelPanelSlider, 'ContinuousValueChange', @uiKernelPanelSliderCallback);

    initKernelPanel();

    % Roi Panel

    uiRoiMainPanel = ...
        uipanel(fiMainWindowPtr('get'),...
                'Units'   , 'pixels',...
                'position', [0 ...
                             addOnWidth('get')+30 ...
                             300 ...
                             getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30 ...
                             ],...
                'AutoResizeChildren', 'off', ...
                'Visible', 'off',...
                'BackgroundColor', viewerBackgroundColor ('get'), ...
                'ForegroundColor', viewerForegroundColor('get') ...
                );
    uiRoiMainPanelPtr('set', uiRoiMainPanel);

    uiRoiPanel = ...
        uipanel(uiRoiMainPanelPtr('get'),...
                'Units'   , 'pixels',...
                'position', [0 ...
                             0 ...
                             280 ...
                             2000 ...
                             ],...
                'AutoResizeChildren', 'off', ...
                'Visible', 'off', ...
                'BackgroundColor', viewerBackgroundColor ('get'), ...
                'ForegroundColor', viewerForegroundColor('get') ...
                );
    uiRoiPanelPtr('set', uiRoiPanel);

    aRoiMainPanelPosition = get(uiRoiMainPanelPtr('get'), 'position');
    uiRoiPanelSlider = ...
        uicontrol('Style'   , 'Slider', ...
                  'Parent'  , uiRoiMainPanelPtr('get'),...
                  'Units'   , 'pixels',...
                  'position', [280 ...
                               0 ...
                               20 ...
                               aRoiMainPanelPosition(4) ...
                               ],...
                  'Value'   , 0, ...
                  'Callback',@uiRoiPanelSliderCallback, ...
                  'BackgroundColor', viewerBackgroundColor ('get'), ...
                  'ForegroundColor', viewerForegroundColor('get') ...
                  );
    uiRoiPanelSliderPtr('set', uiRoiPanelSlider);
    % addlistener(uiRoiPanelSlider, 'Value', 'PreSet', @uiRoiPanelSliderCallback);
    addlistener(uiRoiPanelSlider, 'ContinuousValueChange', @uiRoiPanelSliderCallback);

    initRoiPanel();

    if size(dicomBuffer('get'), 3) == 1
        if switchTo3DMode('get')     == true || ...
           switchToIsoSurface('get') == true || ...
           switchToMIPMode('get')    == true

                if showBorder('get') == true
                    sBorderType = 'line';
                else
                    sBorderType = 'none';
                end

                uiOneWindow = ...
                    uipanel(fiMainWindowPtr('get'),...
                            'Units'   , 'pixels',...
                            'BorderType'     , sBorderType, ...
                            'BackgroundColor', surfaceColor('get', background3DOffset('get')),...
                            'AutoResizeChildren', 'off', ...
                            'position', [680 ...
                                         addOnWidth('get')+30 ...
                                         getMainWindowSize('xsize')-680 ...
                                         getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30 ...
                                         ]...
                            );
                  uiOneWindowPtr('set', uiOneWindow);

                  uiMain3DPanel = ...
                      uipanel(fiMainWindowPtr('get'),...
                              'Units'   , 'pixels',...
                              'AutoResizeChildren', 'off', ...
                              'position', [0 ...
                                           addOnWidth('get')+30 ...
                                           680 ...
                                           getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30 ...
                                           ]...
                              );
                  uiMain3DPanelPtr('set', uiMain3DPanel);

                  ui3DPanel = ...
                      uipanel(uiMain3DPanelPtr('get'),...
                              'Units'   , 'pixels',...
                              'position', [0 ...
                                           0 ...
                                           660 ...
                                           2000 ...
                                           ],...
                              'AutoResizeChildren', 'off', ...
                              'BackgroundColor', viewerBackgroundColor ('get'), ...
                              'ForegroundColor', viewerForegroundColor('get') ...
                              );
                   ui3DPanelPtr('set', ui3DPanel);

                  aMain3DPanelPosition = get(uiMain3DPanelPtr('get'), 'position');
                  ui3DPanelSlider = ...
                      uicontrol('Style'   , 'Slider', ...
                                'Parent'  , uiMain3DPanelPtr('get'),...
                                'Units'   , 'pixels',...
                                'position', [660 ...
                                             0 ...
                                             20 ...
                                             aMain3DPanelPosition(4) ...
                                             ],...
                                'Value', 0, ...
                                'Callback', @ui3DPanelSliderCallback, ...
                                'BackgroundColor', viewerBackgroundColor ('get'), ...
                                'ForegroundColor', viewerForegroundColor('get') ...
                                );
                  ui3DPanelSliderPtr('set', ui3DPanelSlider);
                  % addlistener(ui3DPanelSlider,'Value','PreSet', @ui3DPanelSliderCallback);
                  addlistener(ui3DPanelSlider, 'ContinuousValueChange', @ui3DPanelSliderCallback);

        else

            if showBorder('get') == true
                sBorderType = 'line';
            else
                sBorderType = 'none';
            end

            uiOneWindow = ...
                uipanel(fiMainWindowPtr('get'),...
                        'Units'          , 'pixels',...
                        'BorderType'     , sBorderType, ...
                        'BackgroundColor', backgroundColor('get'),...
                        'AutoResizeChildren', 'off', ...
                        'position'       , [0 ...
                                            addOnWidth('get')+30 ...
                                            getMainWindowSize('xsize') ...
                                            getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30 ...
                                            ]...
                        );
           
            uiOneWindowPtr('set', uiOneWindow);

        end
    else

        if showBorder('get') == true
            sBorderType = 'line';
        else
            sBorderType = 'none';
        end

        uiCorWindow = ...
            uipanel(fiMainWindowPtr('get'),...
                    'Units'          , 'pixels',...
                    'BorderType'     , sBorderType, ...
                    'BackgroundColor', backgroundColor('get'),...
                    'AutoResizeChildren', 'off', ...
                    'position'       , [0 ...
                                        addOnWidth('get')+30 ...
                                        getMainWindowSize('xsize')/5 ...
                                        getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30-15 ...
                                        ]...
                    );
        uiCorWindowPtr('set', uiCorWindow);

        if isVsplash('get') == false
            
            aImgFullScreenIcon = getFullScreenIconImage(uiCorWindow, true);
                
            if ~isempty(aImgFullScreenIcon)

                aUiCorPosition = get(uiCorWindow ,'Position');
        
                btnUiCorWindowFullScreen = ...
                    uicontrol(uiCorWindow, ...
                             'Position'       , [aUiCorPosition(3)-20 10 20 20], ...
                             'Enable'         , 'on', ...
                             'String'         , '',...
                             'BackgroundColor', backgroundColor('get'), ...
                             'ForegroundColor', overlayColor('get'), ...
                             'TooltipString'  , 'Full Screen', ...
                             'CData'          , aImgFullScreenIcon, ...
                             'CallBack'       , @btnUiCorWindowFullScreenCallback ...
                             );
    
                btnUiCorWindowFullScreenPtr('set', btnUiCorWindowFullScreen);
            else
                btnUiCorWindowFullScreenPtr('set', []);
           end
        end

        uiSliderCor = ...
              uicontrol(fiMainWindowPtr('get'), ...
                        'Style'   , 'Slider', ...
                        'Position', [0 ...
                                     addOnWidth('get')+30 ...
                                     getMainWindowSize('xsize')/5 ...
                                     20 ...
                                     ], ...
                        'Value'   , 0.5, ...
                        'Enable'  , 'on', ...
                        'CallBack', @sliderCorCallback, ...
                        'BackgroundColor', viewerBackgroundColor ('get'), ...
                        'ForegroundColor', viewerForegroundColor('get') ...
                        );
          uiSliderCorPtr('set', uiSliderCor);
          % addlistener(uiSliderCor, 'Value', 'PreSet', @sliderCorCallback);
          addlistener(uiSliderCor, 'ContinuousValueChange', @sliderCorCallback);

          uiSagWindow = ...
              uipanel(fiMainWindowPtr('get'),...
                      'Units'          , 'pixels',...
                      'BorderType'     , sBorderType, ...
                      'AutoResizeChildren', 'off', ...
                      'BackgroundColor', backgroundColor('get'),...
                      'position', [getMainWindowSize('xsize')/5 ...
                                   addOnWidth('get')+30+15 ...
                                   getMainWindowSize('xsize')/5 ...
                                   getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30-15 ...
                                   ]...
                      );

        uiSagWindowPtr('set', uiSagWindow);

        if isVsplash('get') == false

            aImgFullScreenIcon = getFullScreenIconImage(uiSagWindow, true);

            if ~isempty(aImgFullScreenIcon)

                aUiSagPosition = get(uiSagWindow ,'Position');
        
                btnUiSagWindowFullScreen = ...
                    uicontrol(uiSagWindow, ...
                             'Position'       , [aUiSagPosition(3)-20 10 20 20], ...
                             'Enable'         , 'on', ...
                             'String'         , '',...
                             'BackgroundColor', backgroundColor('get'), ...
                             'ForegroundColor', overlayColor('get'), ...
                             'TooltipString'  , 'Full Screen', ...
                             'CData'          , aImgFullScreenIcon, ...
                             'CallBack'       , @btnUiSagWindowFullScreenCallback ...
                             );
                btnUiSagWindowFullScreenPtr('set', btnUiSagWindowFullScreen);
            else
                btnUiSagWindowFullScreenPtr('set', []);
            end
        end

         uiSliderSag = ...
             uicontrol(fiMainWindowPtr('get'), ...
                       'Style'   , 'Slider', ...
                       'Position', [(getMainWindowSize('xsize')/5) ...
                                    addOnWidth('get')+30 ...
                                    getMainWindowSize('xsize')/5 ...
                                    20 ...
                                    ], ...
                       'Value'   , 0.5, ...
                       'Enable'  , 'on', ...
                       'CallBack', @sliderSagCallback, ...
                       'BackgroundColor', viewerBackgroundColor ('get'), ...
                       'ForegroundColor', viewerForegroundColor('get') ...
                       );
         uiSliderSagPtr('set', uiSliderSag);
         % addlistener(uiSliderSag,'Value','PreSet',@sliderSagCallback);
         addlistener(uiSliderSag, 'ContinuousValueChange', @sliderSagCallback);

         uiTraWindow = ...
             uipanel(fiMainWindowPtr('get'),...
                     'Units'          , 'pixels',...
                     'BorderType'     , sBorderType, ...
                     'AutoResizeChildren', 'off', ...
                     'BackgroundColor', backgroundColor('get'),...
                     'position'       , [(getMainWindowSize('xsize')/2.5) ...
                                         addOnWidth('get')+30+15 ...
                                         getMainWindowSize('xsize')/2.5 ...
                                         getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30-15 ...
                                         ]...
                     );
        uiTraWindowPtr('set', uiTraWindow);

        if isVsplash('get') == false

            aImgFullScreenIcon = getFullScreenIconImage(uiTraWindow, true);

            if ~isempty(aImgFullScreenIcon)

                aUiTraPosition = get(uiTraWindow ,'Position');
        
                btnUiTraWindowFullScreen = ...
                    uicontrol(uiTraWindow, ...
                             'Position'       , [aUiTraPosition(3)-73 10 20 20], ...
                             'Enable'         , 'on', ...
                             'String'         , '',...
                             'BackgroundColor', backgroundColor('get'), ...
                             'ForegroundColor', overlayColor('get'), ...
                             'TooltipString'  , 'Full Screen', ...
                             'CData'          , aImgFullScreenIcon, ...
                             'CallBack'       , @btnUiTraWindowFullScreenCallback ...
                             );
                btnUiTraWindowFullScreenPtr('set', btnUiTraWindowFullScreen);
            else
                btnUiTraWindowFullScreenPtr('set', []);
            end
        end

        uiSliderTra = ...
            uicontrol(fiMainWindowPtr('get'), ...
                      'Style'   , 'Slider', ...
                      'Position', [(getMainWindowSize('xsize')/2.5) ...
                                   addOnWidth('get')+30 ...
                                   getMainWindowSize('xsize')/2.5 ...
                                   20 ...
                                   ], ...
                      'Value'   , 0.5, ...
                      'Enable'  , 'on', ...
                      'CallBack', @sliderTraCallback, ...
                      'BackgroundColor', viewerBackgroundColor ('get'), ...
                      'ForegroundColor', viewerForegroundColor('get') ...
                      );
        uiSliderTraPtr('set', uiSliderTra);
        % addlistener(uiSliderTra, 'Value', 'PreSet', @sliderTraCallback);
        addlistener(uiSliderTra, 'ContinuousValueChange', @sliderTraCallback);

         uiMipWindow = ...
             uipanel(fiMainWindowPtr('get'),...
                     'Units'          , 'pixels',...
                     'BorderType'     , sBorderType, ...
                     'BackgroundColor', backgroundColor('get'),...
                     'AutoResizeChildren', 'off', ...
                     'position'       , [(getMainWindowSize('xsize')/1.25) ...
                                         addOnWidth('get')+30+15 ...
                                         getMainWindowSize('xsize')/5 ...
                                         getMainWindowSize('ysize')-getTopWindowSize('ysize')-addOnWidth('get')-30-15 ...
                                         ]...
                     );
        uiMipWindowPtr('set', uiMipWindow);

        if isVsplash('get') == false

            aImgFullScreenIcon = getFullScreenIconImage(uiMipWindow, true);

            if ~isempty(aImgFullScreenIcon)

                aUiMipPosition = get(uiMipWindow ,'Position');
        
                btnUiMipWindowFullScreen = ...
                    uicontrol(uiMipWindow, ...
                             'Position'       , [aUiMipPosition(3)-20 10 20 20], ...
                             'Enable'         , 'on', ...
                             'String'         , '',...
                             'BackgroundColor', backgroundColor('get'), ...
                             'ForegroundColor', overlayColor('get'), ...
                             'TooltipString'  , 'Full Screen', ...
                             'CData'          , aImgFullScreenIcon, ...
                             'CallBack'       , @btnUiMipWindowFullScreenCallback ...
                             );
                btnUiMipWindowFullScreenPtr('set', btnUiMipWindowFullScreen);
            else
                btnUiMipWindowFullScreenPtr('set', []);
            end
        end

        if mipAngle('get') == 1
            dMipSliderValue = 0;
        else
            dMipSliderValue = mipAngle('get')/32;
        end

        uiSliderMip = ...
            uicontrol(fiMainWindowPtr('get'), ...
                      'Style'   , 'Slider', ...
                      'Position', [(getMainWindowSize('xsize')/1.25) ...
                                   addOnWidth('get')+30 ...
                                   getMainWindowSize('xsize')/5 ...
                                   20 ...
                                   ], ...
                      'Value'   ,  dMipSliderValue, ...
                      'Enable'  , 'on', ...
                      'CallBack', @sliderTraCallback, ...
                      'BackgroundColor', viewerBackgroundColor ('get'), ...
                      'ForegroundColor', viewerForegroundColor('get') ...
                      );
        uiSliderMipPtr('set', uiSliderMip);
        % addlistener(uiSliderMip, 'Value', 'PreSet', @sliderMipCallback);
        addlistener(uiSliderMip, 'ContinuousValueChange', @sliderMipCallback);

    end

    %        uiAddOnWindow =  uipanel(fiMainWindowPtr('get'),...
    %                              'Units'   , 'pixels',...
    %                              'position', [0 ...
    %                                           30 ...
    %                                           getMainWindowSize('xsize') ...
    %                                           addOnWidth('get')]...
    %                               );

     mainWindowMenu();

     if numel(inputTemplate('get'))
        sSeriesEnable = 'on';
     else
        sSeriesEnable = 'off';
     end

     uiSeries = ...
         uicontrol(uiTopWindowPtr('get'), ...
                   'Style'   , 'popup', ...
                   'Enable'  , 'off', ...
                   'Position', [5 7 270 25], ...
                   'String'  , seriesDescription('get'), ...
                   'Value'   , 1,...
                   'Enable'  , sSeriesEnable, ...
                   'Callback', @setSeriesCallback, ...
                   'BackgroundColor', viewerBackgroundColor ('get'), ...
                   'ForegroundColor', viewerForegroundColor('get'), ...
                   'Tooltip', 'Series selector'... 
                  );
     uiSeriesPtr('set', uiSeries);

     btn3D = ...
         uicontrol(uiTopWindowPtr('get'),...
                   'Position', [285 7 65 25],...
                   'Enable'  , 'off', ...
                   'String'  , 'Volume',...
                   'Callback', @set3DCallback, ...
                   'BackgroundColor', viewerBackgroundColor ('get'), ...
                   'ForegroundColor', viewerForegroundColor('get'), ...
                   'Tooltip', '<html>3D Volume rendering<br>Click to enable 3D view, click again to revert to 2D view'... 
                   );
     btn3DPtr('set', btn3D);

     btnIsoSurface = ...
         uicontrol(uiTopWindowPtr('get'),...
                   'Position', [351 7 65 25],...
                   'Enable'  , 'off', ...
                   'String'  , 'ISO',...
                   'Callback', @setIsoSurfaceCallback, ...
                   'BackgroundColor', viewerBackgroundColor ('get'), ...
                   'ForegroundColor', viewerForegroundColor('get'), ...
                   'Tooltip', '<html>3D ISOsurface<br>Click to enable 3D view, click again to revert to 2D view'... 
                   );
     btnIsoSurfacePtr('set', btnIsoSurface);

     btnMIP = ...
         uicontrol(uiTopWindowPtr('get'),...
                   'Position', [417 7 65 25],...
                   'Enable'  , 'off', ...
                   'String'  , 'MIP',...
                   'Callback', @setMIPCallback, ...
                   'BackgroundColor', viewerBackgroundColor ('get'), ...
                   'ForegroundColor', viewerForegroundColor('get'), ...
                   'Tooltip', '<html>3D Maximum Intensity Projection<br>Click to enable 3D view, click again to revert to 2D view'... 
                   );
     btnMIPPtr('set', btnMIP);

     if numel(inputTemplate('get'))
        sBackgroundColor = viewerButtonPushedBackgroundColor('get');
        sForegroundColor = viewerButtonPushedForegroundColor('get');
        sFontWeight = 'bold';
    else
        sBackgroundColor = viewerBackgroundColor('get');
        sForegroundColor = viewerForegroundColor('get');
        sFontWeight = 'normal';
     end

     btnTriangulate = ...
         uicontrol(uiTopWindowPtr('get'), ...
                   'Position'       , [492 7 65 25], ...
                   'Enable'         , 'off', ...
                   'String'         , 'Triangul...',...
                   'FontWeight'     , sFontWeight, ...
                   'BackgroundColor', sBackgroundColor, ...
                   'ForegroundColor', sForegroundColor, ...
                   'Tooltip'        , 'Triangulation (t)', ...
                   'Callback'       , @triangulateCallback ...
                   );
     btnTriangulatePtr('set', btnTriangulate);

     btnPan = ...
         uicontrol(uiTopWindowPtr('get'), ...
                   'Position', [558 7 65 25], ...
                   'String'  , 'Pan',...
                   'Enable'  , 'off', ...
                   'Callback', @setPanCallback, ...
                   'BackgroundColor', viewerBackgroundColor ('get'), ...
                   'ForegroundColor', viewerForegroundColor('get'), ...
                   'Tooltip', '<html>Pan (n)<br>Press ''n'' or click to enable, click again or right-click to return to triangulation'... 
                   );
     btnPanPtr('set', btnPan);

     btnZoom = uicontrol(uiTopWindowPtr('get'), ...
                          'Position', [624 7 65 25], ...
                          'Enable'  , 'off', ...
                          'String'  , 'Zoom',...
                          'Callback', @setZoomCallback, ...
                          'BackgroundColor', viewerBackgroundColor ('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'Tooltip', '<html>Zoom (z)<br>Press ''z'' or click to enable, click again or right-click to return to triangulation</html>'... 
                          );
    btnZoomPtr('set', btnZoom);


    btnRegister = uicontrol(uiTopWindowPtr('get'), ...
                          'Position', [699 7 65 25], ...
                          'Enable'  , 'off', ...
                          'String'  , 'Register',...
                          'Callback', @setRegistrationCallback, ...
                          'BackgroundColor', viewerBackgroundColor ('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'Tooltip', 'Image Registration and resampling'... 
                          );
    btnRegisterPtr('set', btnRegister);


    btnMath = uicontrol(uiTopWindowPtr('get'), ...
                          'Position', [765 7 65 25], ...
                          'Enable'  , 'off', ...
                          'String'  , 'Math',...
                          'Callback', @setMathCallback, ...
                          'BackgroundColor', viewerBackgroundColor ('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'Tooltip', 'Mathematical toolset'... 
                          );
    btnMathPtr('set', btnMath);

    btnVsplash = uicontrol(uiTopWindowPtr('get'), ...
                          'Position', [840 7 65 25], ...
                          'Enable'  , 'off', ...
                          'String'  , 'V-Splash',...
                          'Callback', @setVsplashCallback, ...
                          'BackgroundColor', viewerBackgroundColor ('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'Tooltip', '<html>2D montage of a 3D image<br>Change the view from the ''View'' menu<br>Click to enable the ''V-Splash'' view, click again to return to the previous view</html>'... 
                         );
    btnVsplashPtr('set', btnVsplash);

    uiEditVsplahX = ...
        uicontrol(uiTopWindowPtr('get'), ...
                  'Style'   , 'Edit', ...
                  'Position', [906 7 25 25], ...
                  'String'  , num2str(vSplashLayout('get', 'x')), ...
                  'Enable'  , 'off', ...
                  'CallBack', @setVsplashLayoutCallback, ...
                  'BackgroundColor', viewerBackgroundColor ('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'Tooltip', 'V-Splash: Number of Rows'... 
               );
    uiEditVsplahXPtr('set', uiEditVsplahX);

    uiEditVsplahY = ...
        uicontrol(uiTopWindowPtr('get'), ...
                  'Style'   , 'Edit', ...
                  'Position', [932 7 25 25], ...
                  'String'  , num2str(vSplashLayout('get', 'y')), ...
                  'Enable'  , 'off', ...
                  'CallBack', @setVsplashLayoutCallback, ...
                  'BackgroundColor', viewerBackgroundColor ('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'Tooltip', 'V-Splash: Number of Columns'... 
                  );
    uiEditVsplahYPtr('set', uiEditVsplahY);

    if numel(seriesDescription('get')) > 1
        sFusionDescription = seriesDescription('get');
        dFusionValue       = 2;
    else
        if numel(dicomBuffer('get')) > 0
            sFusionDescription = seriesDescription('get');
            dFusionValue       = 1;
        else
            sFusionDescription = ' ';
            dFusionValue       = 1;
        end
    end

     btnFusion = ...
         uicontrol(uiTopWindowPtr('get'), ...
                   'Position', [967 7 65 25], ...
                   'Enable'  , 'off', ...
                   'String'  , 'Fusion',...
                   'Callback', @setFusionCallback, ...
                   'BackgroundColor', viewerBackgroundColor ('get'), ...
                   'ForegroundColor', viewerForegroundColor('get'), ...
                   'Tooltip', '<html>Image Fusion<br>Click to activate/deactivate</html>'... 
                   );
     btnFusionPtr('set', btnFusion);

     uiFusedSeries = ...
         uicontrol(uiTopWindowPtr('get'), ...
                  'Style'   , 'popup', ...
                  'Position', [1034 7 270 25], ...
                  'String'  , sFusionDescription, ...
                  'Value'   , dFusionValue,...
                  'Enable'  , 'off', ...
                  'Callback', @setFusionSeriesCallback, ...
                  'BackgroundColor', viewerBackgroundColor ('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'Tooltip', '<html>Image Fusion Series Selector<br>When the fusion is activated, add another series to the current fusion by selecting it</html>'... 
                  );
    uiFusedSeriesPtr('set', uiFusedSeries);

    btnLinkMip = ...
        uicontrol(uiTopWindowPtr('get'), ...
                  'Position', [1313 7 65 25], ...
                  'Enable'  , 'off', ...
                  'String'  , 'Link MIP',...
                  'Callback', @setLinkMipCallback, ...
                  'BackgroundColor', viewerBackgroundColor ('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'Tooltip', '<html>Link 2D MIP<br>When activated, the colormap, intensity and fusion will synchronize</html>'... 
                 );
    btnLinkMipPtr('set', btnLinkMip);
    
    if link2DMip('get') == true
        set(btnLinkMipPtr('get'), 'BackgroundColor', viewerButtonPushedBackgroundColor('get'));
        set(btnLinkMipPtr('get'), 'ForegroundColor', viewerButtonPushedForegroundColor('get'));
        set(btnLinkMipPtr('get'), 'FontWeight', 'bold');
    else
        set(btnLinkMipPtr('get'), 'BackgroundColor', viewerBackgroundColor('get'));
        set(btnLinkMipPtr('get'), 'ForegroundColor', viewerForegroundColor('get'));
        set(btnLinkMipPtr('get'), 'FontWeight', 'normal');
    end       

%     aScreenSize  = get(groot, 'Screensize');
% 
%     if aScreenSize(3) > 1450
%         aTopWindowBarPosition = get(uiTopWindowPtr('get'), 'Position');
%         btnExitViewer = ...
%             uicontrol(uiTopWindowPtr('get'), ...
%                       'Position', [aTopWindowBarPosition(3)-70 6 65 25], ...
%                       'FontWeight','bold',...
%                       'Enable'  , 'on', ...
%                       'String'  , 'Exit',...
%                       'Callback', 'close', ...
%                       'BackgroundColor', [0.2 0.039 0.027], ...
%                       'ForegroundColor', [0.94 0.94 0.94], ...
%                       'Tooltip', 'Exit Viewer'... 
%                      );
%         btnExitViewerPtr('set', btnExitViewer);
%     end

    if size(dicomBuffer('get'), 3) == 1
        axef = ...
            axes(uiOneWindowPtr('get'), ...
                 'Units'   , 'normalized', ...
                 'Ydir'    , 'reverse', ...
                 'Position', [0 0 1 1], ...
                 'Visible' , 'off'...
                 );
        axef.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        axef.Toolbar.Visible = 'off';          
        axefPtr('set', axef, 1);
        disableDefaultInteractivity(axef);
       
        axefc = ...
            axes(uiOneWindowPtr('get'), ...
                 'Units'   , 'normalized', ...
                 'Ydir'    , 'reverse', ...
                 'Position', [0 0 1 1], ...
                 'Visible' , 'off'...
                 );
        axefc.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        axefc.Toolbar.Visible = 'off';            
        axefcPtr('set', axefc, 1);
        disableDefaultInteractivity(axefc);
       
%        axer = ...
%            axes(uiOneWindowPtr('get'), ...
%                 'Units'   , 'normalized', ...
%                 'Ydir'    , 'reverse', ...
%                 'Position', [0 0 1 1], ...
%                 'Visible' , 'off'...
%                 );
%        axis(axer, 'equal');
%        axerPtr('set', axer, 1);
        
        axe = ...
            axes(uiOneWindowPtr('get'), ...
                 'Units'   , 'normalized', ...
                 'Ydir'    , 'reverse', ...
                 'Position', [0 0 1 1], ...
                 'Visible' , 'off'...
                 );
        axe.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        axe.Toolbar.Visible = 'off';         
        axePtr('set', axe, 1);
        disableDefaultInteractivity(axe);
       
%        linkaxes([axe axer],'xy');                                
%        uistack(axer, 'top');           
    else              
       
       axes1f = ...
           axes(uiCorWindowPtr('get'), ...
                'Units'   , 'normalized', ...
                'Ydir'    , 'reverse', ...
                'xlimmode','manual',...
                'ylimmode','manual',...
                'zlimmode','manual',...
                'climmode','manual',...
                'alimmode','manual',...
                'Position', [0 0 1 1], ...
                'color','none',...
                'Visible' , 'off'...
                );
       axes1f.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
       axes1f.Toolbar.Visible = 'off';         
       axes1fPtr('set', axes1f, 1);
       disableDefaultInteractivity(axes1f);
       
       axes1fc = ...
           axes(uiCorWindowPtr('get'), ...
                'Units'   , 'normalized', ...
                'Ydir'    , 'reverse', ...
                'xlimmode','manual',...
                'ylimmode','manual',...
                'zlimmode','manual',...
                'climmode','manual',...
                'alimmode','manual',...
                'Position', [0 0 1 1], ...
                'color','none',...
                'Visible' , 'off'...
                );
       axes1fc.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
       axes1fc.Toolbar.Visible = 'off';           
       axes1fcPtr('set', axes1fc, 1);    
       disableDefaultInteractivity(axes1fc);
       
%       axes1r = ...
%           axes(uiCorWindowPtr('get'), ...
%                'Units'   , 'normalized', ...
%                'Ydir'    , 'reverse', ...
%                'xlimmode', 'manual',...
%                'ylimmode', 'manual',...
%                'zlimmode', 'manual',...
%                'climmode', 'manual',...
%                'alimmode', 'manual',...
%                'Position', [0 0 1 1], ...
%                'Visible' , 'off'...
%                );
%       axis(axes1r, 'equal');
%       axes1rPtr('set', axes1r, 1);   
       
       axes1 = ...
           axes(uiCorWindowPtr('get'), ...
                'Units'   , 'normalized', ...
                'Ydir'    , 'reverse', ...
                'xlimmode', 'manual',...
                'ylimmode', 'manual',...
                'zlimmode', 'manual',...
                'climmode', 'manual',...
                'alimmode', 'manual',...
                'Position', [0 0 1 1], ...
                'Visible' , 'off'...
                );
       axes1.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
       axes1.Toolbar.Visible = 'off';       
       axes1Ptr('set', axes1, 1);                            
       disableDefaultInteractivity(axes1);
       
%       linkaxes([axes1 axes1r],'xy');                                
%       uistack(axes1r, 'top');
        
       axes2f = ...
           axes(uiSagWindowPtr('get'), ...
                'Units'   , 'normalized', ...
                'Ydir'    , 'reverse', ...
                'xlimmode','manual',...
                'ylimmode','manual',...
                'zlimmode','manual',...
                'climmode','manual',...
                'alimmode','manual',...
                'Position', [0 0 1 1], ...
                'color','none',...
                'Visible' , 'off'...
                );
       axes2f.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
       axes2f.Toolbar.Visible = 'off';             
       axes2fPtr('set', axes2f, 1);
       disableDefaultInteractivity(axes2f);
       
       axes2fc = ...
           axes(uiSagWindowPtr('get'), ...
                'Units'   , 'normalized', ...
                'Ydir'    , 'reverse', ...
                'xlimmode','manual',...
                'ylimmode','manual',...
                'zlimmode','manual',...
                'climmode','manual',...
                'alimmode','manual',...
                'Position', [0 0 1 1], ...
                'color','none',...
                'Visible' , 'off'...
                );
       axes2fc.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
       axes2fc.Toolbar.Visible = 'off';            
       axes2fcPtr('set', axes2fc, 1);
       disableDefaultInteractivity(axes2fc);
       
%       axes2r = ...
%           axes(uiSagWindowPtr('get'), ...
%                'Units'   , 'normalized', ...
%                'Ydir'    , 'reverse', ...
%                'xlimmode', 'manual',...
%                'ylimmode', 'manual',...
%                'zlimmode', 'manual',...
%                'climmode', 'manual',...
%                'alimmode', 'manual',...
%                'Position', [0 0 1 1], ...
%                'Visible' , 'off'...
%                );
%       axis(axes2r, 'equal');
%       axes2rPtr('set', axes2r, 1);  
       
       axes2 = ...
           axes(uiSagWindowPtr('get'), ...
                'Units'   , 'normalized', ...
                'xlimmode', 'manual',...
                'Ydir'    , 'reverse', ...
                'ylimmode', 'manual',...
                'zlimmode', 'manual',...
                'climmode', 'manual',...
                'alimmode', 'manual',...
                'Position', [0 0 1 1], ...
                'Visible' , 'off'...
               );
       axes2.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
       axes2.Toolbar.Visible = 'off';           
       axes2Ptr('set', axes2, 1);                            
       disableDefaultInteractivity(axes2);
       
%       linkaxes([axes2 axes2r],'xy');                                
%       uistack(axes2r, 'top');
       
       axes3f = ...
           axes(uiTraWindowPtr('get'), ...
                'Units'   , 'normalized', ...
                'Ydir'    , 'reverse', ...
                'xlimmode','manual',...
                'ylimmode','manual',...
                'zlimmode','manual',...
                'climmode','manual',...
                'alimmode','manual',...
                'Position', [0 0 1 1], ...
                'color','none',...
                'Visible' , 'off'...
                );
       axes3f.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
       axes3f.Toolbar.Visible = 'off';           
       axes3fPtr('set', axes3f, 1);
       disableDefaultInteractivity(axes3f);
      
       axes3fc = ...
           axes(uiTraWindowPtr('get'), ...
                'Units'   , 'normalized', ...
                'Ydir'    , 'reverse', ...
                'xlimmode','manual',...
                'ylimmode','manual',...
                'zlimmode','manual',...
                'climmode','manual',...
                'alimmode','manual',...
                'Position', [0 0 1 1], ...
                'color','none',...
                'Visible' , 'off'...
                );
       axes3fc.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
       axes3fc.Toolbar.Visible = 'off';             
       axes3fcPtr('set', axes3fc, 1);
       disableDefaultInteractivity(axes3fc);
       
%       axes3r = ...
%           axes(uiTraWindowPtr('get'), ...
%                'Units'   , 'normalized', ...
%                'Ydir'    , 'reverse', ...
%                'xlimmode', 'manual',...
%                'ylimmode', 'manual',...
%                'zlimmode', 'manual',...
%                'climmode', 'manual',...
%                'alimmode', 'manual',...
%                'Position', [0 0 1 1], ...
%                'Visible' , 'off'...
%                );
%       axis(axes3r, 'equal');
%       axes3rPtr('set', axes3r, 1);  
       
       axes3 = ...
           axes(uiTraWindowPtr('get'), ...
                'Units'   , 'normalized', ...
                'Ydir'    , 'reverse', ...
                'xlimmode', 'manual',...
                'ylimmode', 'manual',...
                'zlimmode', 'manual',...
                'climmode', 'manual',...
                'alimmode', 'manual',...
                'Position', [0 0 1 1], ...
                'Visible' , 'off'...
               );
       axes3.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
       axes3.Toolbar.Visible = 'off';           
       axes3Ptr('set', axes3, 1);         
       disableDefaultInteractivity(axes3);
       
%       linkaxes([axes3 axes3r],'xy');                                
%       uistack(axes3r, 'top');
       
       axesMipf = ...
           axes(uiMipWindowPtr('get'), ...
                'Units'   , 'normalized', ...
                'Ydir'    , 'reverse', ...
                'xlimmode','manual',...
                'ylimmode','manual',...
                'zlimmode','manual',...
                'climmode','manual',...
                'alimmode','manual',...
                'Position', [0 0 1 1], ...
                'color','none',...
                'Visible' , 'off'...
                );
       axesMipf.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
       axesMipf.Toolbar.Visible = 'off';            
       axesMipfPtr('set', axesMipf, 1);
       disableDefaultInteractivity(axesMipf);
     
       axesMipfc = ...
           axes(uiMipWindowPtr('get'), ...
                'Units'   , 'normalized', ...
                'Ydir'    , 'reverse', ...
                'xlimmode','manual',...
                'ylimmode','manual',...
                'zlimmode','manual',...
                'climmode','manual',...
                'alimmode','manual',...
                'Position', [0 0 1 1], ...
                'color','none',...
                'Visible' , 'off'...
                );
       axesMipfc.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
       axesMipfc.Toolbar.Visible = 'off';           
       axesMipfcPtr('set', axesMipfc, 1);
       disableDefaultInteractivity(axesMipfc);
       
       axesMip = ...
           axes(uiMipWindowPtr('get'), ...
                'Units'   , 'normalized', ...
                'Ydir'    , 'reverse', ...
                'xlimmode', 'manual',...
                'ylimmode', 'manual',...
                'zlimmode', 'manual',...
                'climmode', 'manual',...
                'alimmode', 'manual',...
                'Position', [0 0 1 1], ...
                'Visible' , 'off'...
               );
       axesMip.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
       axesMip.Toolbar.Visible = 'off';        
       axesMipPtr('set', axesMip, 1);
       disableDefaultInteractivity(axesMip);
            
    end

    if(numel(dicomBuffer('get', [], get(uiSeriesPtr('get'), 'Value'))))

        % Deactivate main tool bar 
        set(uiSeriesPtr('get'), 'Enable', 'off');                        
        mainToolBarEnable('off');    
                
        clearDisplay();
        initDisplay(3);

%        link2DMip('set', true);

%        set(btnLinkMipPtr('get'), 'BackgroundColor', viewerButtonPushedBackgroundColor('get'));
%        set(btnLinkMipPtr('get'), 'ForegroundColor', viewerButtonPushedForegroundColor('get'));    
            
        dicomViewerCore();
        
%        atMetaData = dicomMetaData('get');          
        
        setViewerDefaultColor(true, dicomMetaData('get'));

        refreshImages();
       
%        if strcmpi(atMetaData{1}.Modality, 'ct')
%            link2DMip('set', false);

%            set(btnLinkMipPtr('get'), 'BackgroundColor', viewerBackgroundColor('get'));
%            set(btnLinkMipPtr('get'), 'ForegroundColor', viewerForegroundColor('get'));        
%        end
        
        if size(dicomBuffer('get', [], get(uiSeriesPtr('get'), 'Value')), 3) ~= 1 || ... % 3D image
           size(dicomBuffer('get', [], get(uiSeriesPtr('get'), 'Value')), 4) ~= 1        % Multi-frame screen capture 

            setPlaybackToolbar('on');
        end

        setRoiToolbar('on');
        
        % Reactivate main tool bar 
        set(uiSeriesPtr('get'), 'Enable', 'on');                        
        mainToolBarEnable('on');  
    end

    function setLinkMipCallback(~, ~)

        if link2DMip('get') == true
            link2DMip('set', false);
        else
            link2DMip('set', true);
        end

        if link2DMip('get') == true
            set(btnLinkMipPtr('get'), 'BackgroundColor', viewerButtonPushedBackgroundColor('get'));
            set(btnLinkMipPtr('get'), 'ForegroundColor', viewerButtonPushedForegroundColor('get'));
            set(btnLinkMipPtr('get'), 'FontWeight', 'bold');
        else
            set(btnLinkMipPtr('get'), 'BackgroundColor', viewerBackgroundColor('get'));
            set(btnLinkMipPtr('get'), 'ForegroundColor', viewerForegroundColor('get'));
            set(btnLinkMipPtr('get'), 'FontWeight', 'normal');
        end

    end
end
